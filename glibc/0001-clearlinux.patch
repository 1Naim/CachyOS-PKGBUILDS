From c5a4f0ef332275d3d2002e1e6d3a53b6e5de6290 Mon Sep 17 00:00:00 2001
From: Peter Jung <admin@ptr1337.dev>
Date: Tue, 7 Jun 2022 15:17:35 +0200
Subject: [PATCH] clearlinux

Signed-off-by: Peter Jung <admin@ptr1337.dev>
---
 bits/floatn-common.h                    | 36 +++++++-------
 crypt/Makefile                          |  2 +
 locale/programs/charmap-dir.c           |  9 +++-
 localedata/Makefile                     | 12 ++---
 malloc/malloc.c                         | 65 +++++++++++++------------
 math/Makefile                           |  2 +
 math/w_sqrt_compat.c                    |  1 +
 misc/sys/cdefs.h                        | 10 ++--
 nptl/pthread_mutex_lock.c               |  8 ++-
 nss/XXX-lookup.c                        |  3 ++
 sunrpc/netname.c                        |  5 ++
 sysdeps/ieee754/dbl-64/e_exp.c          |  1 +
 sysdeps/ieee754/dbl-64/e_exp2.c         |  1 +
 sysdeps/ieee754/ldbl-128/bits/floatn.h  |  6 +--
 sysdeps/unix/sysv/linux/x86_64/sysdep.h | 14 ++++++
 sysdeps/x86/bits/floatn.h               |  8 +--
 sysdeps/x86_64/ffs.c                    |  1 +
 sysdeps/x86_64/ffsll.c                  |  1 +
 sysdeps/x86_64/fpu/Makefile             |  5 +-
 19 files changed, 118 insertions(+), 72 deletions(-)

diff --git a/bits/floatn-common.h b/bits/floatn-common.h
index 92982d6460..18c3a88982 100644
--- a/bits/floatn-common.h
+++ b/bits/floatn-common.h
@@ -145,7 +145,7 @@ typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));
 # endif
 
 # if __HAVE_FLOAT32
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 #   define __CFLOAT32 _Complex float
 #  else
 #   define __CFLOAT32 _Complex _Float32
@@ -153,7 +153,7 @@ typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));
 # endif
 
 # if __HAVE_FLOAT64
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 #   ifdef __NO_LONG_DOUBLE_MATH
 #    define __CFLOAT64 _Complex long double
 #   else
@@ -165,7 +165,7 @@ typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));
 # endif
 
 # if __HAVE_FLOAT32X
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 #   define __CFLOAT32X _Complex double
 #  else
 #   define __CFLOAT32X _Complex _Float32x
@@ -173,7 +173,7 @@ typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));
 # endif
 
 # if __HAVE_FLOAT64X
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 #   if __HAVE_FLOAT64X_LONG_DOUBLE
 #    define __CFLOAT64X _Complex long double
 #   else
@@ -210,11 +210,11 @@ typedef float _Float16 __attribute__ ((__mode__ (__HF__)));
 
 # if __HAVE_FLOAT32
 
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef float _Float32;
 #  endif
 
-#  if !__GNUC_PREREQ (7, 0)
+#  if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #   define __builtin_huge_valf32() (__builtin_huge_valf ())
 #   define __builtin_inff32() (__builtin_inff ())
 #   define __builtin_nanf32(x) (__builtin_nanf (x))
@@ -234,11 +234,11 @@ typedef float _Float32;
 
 #  ifdef __NO_LONG_DOUBLE_MATH
 
-#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef long double _Float64;
 #   endif
 
-#   if !__GNUC_PREREQ (7, 0)
+#   if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #    define __builtin_huge_valf64() (__builtin_huge_vall ())
 #    define __builtin_inff64() (__builtin_infl ())
 #    define __builtin_nanf64(x) (__builtin_nanl (x))
@@ -247,11 +247,11 @@ typedef long double _Float64;
 
 #  else
 
-#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef double _Float64;
 #   endif
 
-#   if !__GNUC_PREREQ (7, 0)
+#   if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #    define __builtin_huge_valf64() (__builtin_huge_val ())
 #    define __builtin_inff64() (__builtin_inf ())
 #    define __builtin_nanf64(x) (__builtin_nan (x))
@@ -264,11 +264,11 @@ typedef double _Float64;
 
 # if __HAVE_FLOAT32X
 
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef double _Float32x;
 #  endif
 
-#  if !__GNUC_PREREQ (7, 0)
+#  if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #   define __builtin_huge_valf32x() (__builtin_huge_val ())
 #   define __builtin_inff32x() (__builtin_inf ())
 #   define __builtin_nanf32x(x) (__builtin_nan (x))
@@ -281,11 +281,11 @@ typedef double _Float32x;
 
 #  if __HAVE_FLOAT64X_LONG_DOUBLE
 
-#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef long double _Float64x;
 #   endif
 
-#   if !__GNUC_PREREQ (7, 0)
+#   if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #    define __builtin_huge_valf64x() (__builtin_huge_vall ())
 #    define __builtin_inff64x() (__builtin_infl ())
 #    define __builtin_nanf64x(x) (__builtin_nanl (x))
@@ -294,11 +294,11 @@ typedef long double _Float64x;
 
 #  else
 
-#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef _Float128 _Float64x;
 #   endif
 
-#   if !__GNUC_PREREQ (7, 0)
+#   if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #    define __builtin_huge_valf64x() (__builtin_huge_valf128 ())
 #    define __builtin_inff64x() (__builtin_inff128 ())
 #    define __builtin_nanf64x(x) (__builtin_nanf128 (x))
@@ -311,11 +311,11 @@ typedef _Float128 _Float64x;
 
 # if __HAVE_FLOAT128X
 
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 #   error "_Float128x supported but no type"
 #  endif
 
-#  if !__GNUC_PREREQ (7, 0)
+#  if !__GNUC_PREREQ (7, 0) || defined(__clang__)
 #   define __builtin_huge_valf128x() ((_Float128x) __builtin_huge_val ())
 #   define __builtin_inff128x() ((_Float128x) __builtin_inf ())
 #   define __builtin_nanf128x(x) ((_Float128x) __builtin_nan (x))
diff --git a/crypt/Makefile b/crypt/Makefile
index 6dd58ffd6d..219471dbe9 100644
--- a/crypt/Makefile
+++ b/crypt/Makefile
@@ -22,6 +22,8 @@ subdir	:= crypt
 
 include ../Makeconfig
 
+CFLAGS-.o += -flto -ffat-lto-objects -fno-stack-protector
+
 headers := crypt.h
 
 extra-libs := libcrypt
diff --git a/locale/programs/charmap-dir.c b/locale/programs/charmap-dir.c
index 396a0d76c0..bd27bf0f31 100644
--- a/locale/programs/charmap-dir.c
+++ b/locale/programs/charmap-dir.c
@@ -224,12 +224,17 @@ charmap_open (const char *directory, const char *name)
   if (stream != NULL)
     return stream;
 
-  memcpy (p, ".gz", 4);
+  memcpy (p, ".zst\0", 5);
+  stream = fopen_uncompressed (pathname, "zstd");
+  if (stream != NULL)
+    return stream;
+
+  memcpy (p, ".gz\0", 4);
   stream = fopen_uncompressed (pathname, "gzip");
   if (stream != NULL)
     return stream;
 
-  memcpy (p, ".bz2", 5);
+  memcpy (p, ".bz2\0", 5);
   stream = fopen_uncompressed (pathname, "bzip2");
   if (stream != NULL)
     return stream;
diff --git a/localedata/Makefile b/localedata/Makefile
index 7741ac3b5e..aedf3418b0 100644
--- a/localedata/Makefile
+++ b/localedata/Makefile
@@ -200,7 +200,7 @@ install-others := $(addprefix $(inst_i18ndir)/, \
 			      $(locales))
 else
 install-others := $(addprefix $(inst_i18ndir)/, \
-			      $(addsuffix .gz, $(charmaps)) \
+			      $(addsuffix .zst, $(charmaps)) \
 			      $(locales))
 endif
 
@@ -330,12 +330,12 @@ $(inst_i18ndir)/charmaps/%: charmaps/% $(+force)
 	rm -f $@
 	$(INSTALL_DATA) $< $@
 else
-# Install the charmap files in gzipped format.
-$(inst_i18ndir)/charmaps/%.gz: charmaps/% $(+force)
+# Install the charmap files in zstd compressed format.
+$(inst_i18ndir)/charmaps/%.zst: charmaps/% $(+force)
 	$(make-target-directory)
-	rm -f $(@:.gz=) $@
-	$(INSTALL_DATA) $< $(@:.gz=)
-	gzip -9n $(@:.gz=)
+	rm -f $(@:.zst=) $@
+	$(INSTALL_DATA) $< $(@:.zst=)
+	zstd --ultra -22 --rm $(@:.zst=)
 endif
 
 # Install the locale source files in the appropriate directory.
diff --git a/malloc/malloc.c b/malloc/malloc.c
index 1a1ac1d8f0..ba6e55020c 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -921,7 +921,7 @@ libc_hidden_proto (__libc_mallopt)
 #define M_TRIM_THRESHOLD       -1
 
 #ifndef DEFAULT_TRIM_THRESHOLD
-#define DEFAULT_TRIM_THRESHOLD (128 * 1024)
+#define DEFAULT_TRIM_THRESHOLD (512 * 1024)
 #endif
 
 /*
@@ -954,7 +954,7 @@ libc_hidden_proto (__libc_mallopt)
 #define M_TOP_PAD              -2
 
 #ifndef DEFAULT_TOP_PAD
-#define DEFAULT_TOP_PAD        (0)
+#define DEFAULT_TOP_PAD        (64 * 1024)
 #endif
 
 /*
@@ -2041,6 +2041,24 @@ madvise_thp (void *p, INTERNAL_SIZE_T size)
 #endif
 }
 
+static inline void
+madvise_populate (void *p, INTERNAL_SIZE_T size)
+{
+#if defined (MADV_POPULATE_WRITE)
+  /* Linux requires the input address to be page-aligned, and unaligned
+     inputs happens only for initial data segment.  */
+  if (__glibc_unlikely (!PTR_IS_ALIGNED (p, GLRO (dl_pagesize))))
+    {
+      void *q = PTR_ALIGN_DOWN (p, GLRO (dl_pagesize));
+      size += PTR_DIFF (p, q);
+      p = q;
+    }
+
+  __madvise (p, size, MADV_POPULATE_WRITE);
+#endif
+}
+
+
 /* ------------------- Support for multiple arenas -------------------- */
 #include "arena.c"
 
@@ -3708,6 +3726,9 @@ __libc_calloc (size_t n, size_t elem_size)
 
   INTERNAL_SIZE_T csz = chunksize (p);
 
+  /* calloc users expect the memory to be cleared, so lets avoid a pile of pagefaults */
+  madvise_populate(mem, sz);
+
   /* Two optional cases in which clearing not necessary */
   if (chunk_is_mmapped (p))
     {
@@ -3730,35 +3751,8 @@ __libc_calloc (size_t n, size_t elem_size)
      minimally 3.  */
   d = (INTERNAL_SIZE_T *) mem;
   clearsize = csz - SIZE_SZ;
-  nclears = clearsize / sizeof (INTERNAL_SIZE_T);
-  assert (nclears >= 3);
-
-  if (nclears > 9)
-    return memset (d, 0, clearsize);
-
-  else
-    {
-      *(d + 0) = 0;
-      *(d + 1) = 0;
-      *(d + 2) = 0;
-      if (nclears > 4)
-        {
-          *(d + 3) = 0;
-          *(d + 4) = 0;
-          if (nclears > 6)
-            {
-              *(d + 5) = 0;
-              *(d + 6) = 0;
-              if (nclears > 8)
-                {
-                  *(d + 7) = 0;
-                  *(d + 8) = 0;
-                }
-            }
-        }
-    }
 
-  return mem;
+  return memset (d, 0, clearsize);
 }
 #endif /* IS_IN (libc) */
 
@@ -4428,6 +4422,7 @@ _int_free (mstate av, mchunkptr p, int have_lock)
   mchunkptr bck;               /* misc temp for linking */
   mchunkptr fwd;               /* misc temp for linking */
 
+  static int alternate;
   size = chunksize (p);
 
   /* Little security check which won't hurt performance: the
@@ -4676,8 +4671,14 @@ _int_free (mstate av, mchunkptr p, int have_lock)
       if (av == &main_arena) {
 #ifndef MORECORE_CANNOT_TRIM
 	if ((unsigned long)(chunksize(av->top)) >=
-	    (unsigned long)(mp_.trim_threshold))
-	  systrim(mp_.top_pad, av);
+            (unsigned long)(mp_.trim_threshold)) {
+        if (alternate) {
+            systrim(mp_.top_pad, av);
+            alternate = 0;
+        } else {
+            alternate = 1;
+        }
+    }
 #endif
       } else {
 	/* Always try heap_trim(), even if the top chunk is not
diff --git a/math/Makefile b/math/Makefile
index 7dae2313ba..652a21a44f 100644
--- a/math/Makefile
+++ b/math/Makefile
@@ -21,6 +21,8 @@ subdir		:= math
 
 include ../Makeconfig
 
+CFLAGS-.o += -fno-stack-protector  -falign-functions=32
+
 # Installed header files.
 headers		:= math.h bits/mathcalls.h \
 		   fpu_control.h complex.h bits/cmathcalls.h fenv.h \
diff --git a/math/w_sqrt_compat.c b/math/w_sqrt_compat.c
index a8b05e0014..a88d4dd587 100644
--- a/math/w_sqrt_compat.c
+++ b/math/w_sqrt_compat.c
@@ -30,6 +30,7 @@
 #if LIBM_SVID_COMPAT
 /* wrapper sqrt */
 double
+__attribute__((aligned(64)))
 __sqrt (double x)
 {
   if (__builtin_expect (isless (x, 0.0), 0) && _LIB_VERSION != _IEEE_)
diff --git a/misc/sys/cdefs.h b/misc/sys/cdefs.h
index 1c2b044a0d..1aa734ba3b 100644
--- a/misc/sys/cdefs.h
+++ b/misc/sys/cdefs.h
@@ -463,7 +463,7 @@
 
 /* GCC 4.3 and above allow passing all anonymous arguments of an
    __extern_always_inline function to some other vararg function.  */
-#if __GNUC_PREREQ (4,3)
+#if __GNUC_PREREQ (4,3) && !defined(__clang__)
 # define __va_arg_pack() __builtin_va_arg_pack ()
 # define __va_arg_pack_len() __builtin_va_arg_pack_len ()
 #endif
@@ -525,7 +525,7 @@
 # endif
 #endif
 
-#if __GNUC_PREREQ (8, 0)
+#if __GNUC_PREREQ (8, 0) && !defined(__clang__)
 /* Describes a char array whose address can safely be passed as the first
    argument to strncpy and strncat, as the char array is not necessarily
    a NUL-terminated string.  */
@@ -536,7 +536,7 @@
 
 /* Undefine (also defined in libc-symbols.h).  */
 #undef __attribute_copy__
-#if __GNUC_PREREQ (9, 0)
+#if __GNUC_PREREQ (9, 0) && !defined(__clang__)
 /* Copies attributes from the declaration or type referenced by
    the argument.  */
 # define __attribute_copy__(arg) __attribute__ ((__copy__ (arg)))
@@ -656,7 +656,7 @@ _Static_assert (0, "IEEE 128-bits long double requires redirection on this platf
 # define __HAVE_GENERIC_SELECTION 0
 #endif
 
-#if __GNUC_PREREQ (10, 0)
+#if __GNUC_PREREQ (10, 0) && !defined(__clang__)
 /* Designates a 1-based positional argument ref-index of pointer type
    that can be used to access size-index elements of the pointed-to
    array according to access mode, or at least one element when
@@ -683,7 +683,7 @@ _Static_assert (0, "IEEE 128-bits long double requires redirection on this platf
 #  define __attr_access_none(argno)
 #endif
 
-#if __GNUC_PREREQ (11, 0)
+#if __GNUC_PREREQ (11, 0) && !defined(__clang__)
 /* Designates dealloc as a function to call to deallocate objects
    allocated by the declared function.  */
 # define __attr_dealloc(dealloc, argno) \
diff --git a/nptl/pthread_mutex_lock.c b/nptl/pthread_mutex_lock.c
index d2e652d151..6c869eb084 100644
--- a/nptl/pthread_mutex_lock.c
+++ b/nptl/pthread_mutex_lock.c
@@ -145,7 +145,13 @@ PTHREAD_MUTEX_LOCK (pthread_mutex_t *mutex)
 		  LLL_MUTEX_LOCK (mutex);
 		  break;
 		}
-	      atomic_spin_nop ();
+		/* MO read while spinning */
+		do
+		  {
+		    atomic_spin_nop ();
+		  }
+		while (atomic_load_relaxed (&mutex->__data.__lock) != 0 &&
+			++cnt < max_cnt);
 	    }
 	  while (LLL_MUTEX_READ_LOCK (mutex) != 0
 		 || LLL_MUTEX_TRYLOCK (mutex) != 0);
diff --git a/nss/XXX-lookup.c b/nss/XXX-lookup.c
index db95937674..7ad6681dd9 100644
--- a/nss/XXX-lookup.c
+++ b/nss/XXX-lookup.c
@@ -52,6 +52,9 @@ DB_LOOKUP_FCT (nss_action_list *ni, const char *fct_name, const char *fct2_name,
   if (! __nss_database_get (DATABASE_NAME_ID, &DATABASE_NAME_SYMBOL))
     return -1;
 
+  if (!DATABASE_NAME_SYMBOL)
+    return -1;
+
   *ni = DATABASE_NAME_SYMBOL;
 
   return __nss_lookup (ni, fct_name, fct2_name, fctp);
diff --git a/sunrpc/netname.c b/sunrpc/netname.c
index bf7f0b81c4..bf45b8bcf1 100644
--- a/sunrpc/netname.c
+++ b/sunrpc/netname.c
@@ -48,7 +48,12 @@ user2netname (char netname[MAXNETNAMELEN + 1], const uid_t uid,
   if ((strlen (dfltdom) + OPSYS_LEN + 3 + MAXIPRINT) > (size_t) MAXNETNAMELEN)
     return 0;
 
+  /* The check above makes sure the line below is actually ok, but
+   * gcc 11.1 spews a warning... */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-overflow"
   sprintf (netname, "%s.%d@%s", OPSYS, uid, dfltdom);
+#pragma GCC diagnostic pop
   i = strlen (netname);
   if (netname[i - 1] == '.')
     netname[i - 1] = '\0';
diff --git a/sysdeps/ieee754/dbl-64/e_exp.c b/sysdeps/ieee754/dbl-64/e_exp.c
index 7966ab7068..b0cba10808 100644
--- a/sysdeps/ieee754/dbl-64/e_exp.c
+++ b/sysdeps/ieee754/dbl-64/e_exp.c
@@ -94,6 +94,7 @@ top12 (double x)
 
 double
 SECTION
+__attribute__((aligned(64)))
 __exp (double x)
 {
   uint32_t abstop;
diff --git a/sysdeps/ieee754/dbl-64/e_exp2.c b/sysdeps/ieee754/dbl-64/e_exp2.c
index df8f5b36e2..3f07110402 100644
--- a/sysdeps/ieee754/dbl-64/e_exp2.c
+++ b/sysdeps/ieee754/dbl-64/e_exp2.c
@@ -87,6 +87,7 @@ top12 (double x)
 }
 
 double
+__attribute__((aligned(64)))
 __exp2 (double x)
 {
   uint32_t abstop;
diff --git a/sysdeps/ieee754/ldbl-128/bits/floatn.h b/sysdeps/ieee754/ldbl-128/bits/floatn.h
index 9ae7b30373..64675aadaa 100644
--- a/sysdeps/ieee754/ldbl-128/bits/floatn.h
+++ b/sysdeps/ieee754/ldbl-128/bits/floatn.h
@@ -55,7 +55,7 @@
 /* Defined to concatenate the literal suffix to be used with _Float128
    types, if __HAVE_FLOAT128 is 1. */
 # if __HAVE_FLOAT128
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 /* The literal suffix f128 exists only since GCC 7.0.  */
 #   define __f128(x) x##l
 #  else
@@ -65,7 +65,7 @@
 
 /* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */
 # if __HAVE_FLOAT128
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 #   define __CFLOAT128 _Complex long double
 #  else
 #   define __CFLOAT128 _Complex _Float128
@@ -76,7 +76,7 @@
 # if __HAVE_FLOAT128
 
 /* The type _Float128 exists only since GCC 7.0.  */
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined __clang__
 typedef long double _Float128;
 #  endif
 
diff --git a/sysdeps/unix/sysv/linux/x86_64/sysdep.h b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
index e1ce3b62eb..964fd3cd1b 100644
--- a/sysdeps/unix/sysv/linux/x86_64/sysdep.h
+++ b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
@@ -238,11 +238,19 @@
 #define INTERNAL_SYSCALL_NCS(number, nr, args...)			\
 	internal_syscall##nr (number, args)
 
+
+#ifdef __AVX2__
+#define VZEROALL "vzeroall\n\t"
+#else
+#define VZEROALL
+#endif
+
 #undef internal_syscall0
 #define internal_syscall0(number, dummy...)				\
 ({									\
     unsigned long int resultvar;					\
     asm volatile (							\
+    VZEROALL								\
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number)							\
@@ -257,6 +265,7 @@
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1)						\
@@ -273,6 +282,7 @@
     register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1), "r" (_a2)				\
@@ -291,6 +301,7 @@
     register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3)			\
@@ -311,6 +322,7 @@
     register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4)		\
@@ -333,6 +345,7 @@
     register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
@@ -358,6 +371,7 @@
     register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
     register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
     asm volatile (							\
+    VZEROALL                                \
     "syscall\n\t"							\
     : "=a" (resultvar)							\
     : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
diff --git a/sysdeps/x86/bits/floatn.h b/sysdeps/x86/bits/floatn.h
index 34a6fdc864..1d1f600c78 100644
--- a/sysdeps/x86/bits/floatn.h
+++ b/sysdeps/x86/bits/floatn.h
@@ -58,7 +58,7 @@
 /* Defined to concatenate the literal suffix to be used with _Float128
    types, if __HAVE_FLOAT128 is 1. */
 # if __HAVE_FLOAT128
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 /* The literal suffix f128 exists only since GCC 7.0.  */
 #   define __f128(x) x##q
 #  else
@@ -68,7 +68,7 @@
 
 /* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */
 # if __HAVE_FLOAT128
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 /* Add a typedef for older GCC compilers which don't natively support
    _Complex _Float128.  */
 typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
@@ -82,7 +82,7 @@ typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
 # if __HAVE_FLOAT128
 
 /* The type _Float128 exists only since GCC 7.0.  */
-#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
+#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus || defined(__clang__)
 typedef __float128 _Float128;
 #  endif
 
@@ -108,7 +108,7 @@ typedef __float128 _Float128;
    e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
    been a __builtin_signbitf128 in GCC and the type-generic builtin is
    only available since GCC 6.  */
-#  if !__GNUC_PREREQ (6, 0)
+#  if !__GNUC_PREREQ (6, 0) || defined(__clang__)
 #   define __builtin_signbitf128 __signbitf128
 #  endif
 
diff --git a/sysdeps/x86_64/ffs.c b/sysdeps/x86_64/ffs.c
index 58298f3f76..f9177e1977 100644
--- a/sysdeps/x86_64/ffs.c
+++ b/sysdeps/x86_64/ffs.c
@@ -22,6 +22,7 @@
 #undef	ffs
 
 int
+__attribute__((aligned(64)))
 __ffs (int x)
 {
   int cnt;
diff --git a/sysdeps/x86_64/ffsll.c b/sysdeps/x86_64/ffsll.c
index 842ebaeb4c..46b4708324 100644
--- a/sysdeps/x86_64/ffsll.c
+++ b/sysdeps/x86_64/ffsll.c
@@ -23,6 +23,7 @@
 #undef	ffsll
 
 int
+__attribute__((aligned(64)))
 ffsll (long long int x)
 {
   long long int cnt;
diff --git a/sysdeps/x86_64/fpu/Makefile b/sysdeps/x86_64/fpu/Makefile
index 9fb587cf8f..9f517854b4 100644
--- a/sysdeps/x86_64/fpu/Makefile
+++ b/sysdeps/x86_64/fpu/Makefile
@@ -70,7 +70,10 @@ ifeq ($(subdir)$(config-cflags-mprefer-vector-width),mathyes)
 #
 # Limit vector width to 128 bits to work around this issue.  It improves
 # performance of sin and cos by more than 40% on Skylake.
-CFLAGS-branred.c = -mprefer-vector-width=128
+CFLAGS-branred.c = -mprefer-vector-width=128 -fno-tree-vectorize
+CFLAGS-s_sincos.c = -mprefer-vector-width=256 -fno-tree-vectorize
+CFLAGS-e_exp.c = -mprefer-vector-width=128 -fno-tree-vectorize
+CFLAGS-e_exp2.c = -mprefer-vector-width=128 -fno-tree-vectorize
 endif
 
 ifeq ($(subdir),benchtests)
-- 
2.36.1

