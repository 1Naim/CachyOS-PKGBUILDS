From c9e0c5187f77d6be99e3765430e3e005934fe30c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jos=C3=A9=20Exp=C3=B3sito?= <jexposit@redhat.com>
Date: Mon, 1 Jul 2024 14:00:49 +0200
Subject: [PATCH 5/9] wayland-egl: Fix race condition in damage_thread

Reported by a static analysis tool:

  1. src/wayland-eglsurface.c:248:17: thread1_checks_field:
     Thread1 uses the value read from field "framesProcessed" in the
     condition "surface->ctx.framesFinished !=
     surface->ctx.framesProcessed".It sees that the condition is true.
     Control is switched to Thread2.
  2. src/wayland-eglsurface.c:248:17: thread2_checks_field:
     Thread2 uses the value read from field "framesProcessed" in the
     condition "surface->ctx.framesFinished !=
     surface->ctx.framesProcessed". It sees that the condition is true.
  3. src/wayland-eglsurface.c:255:17: thread2_acquires_lock:
     Thread2 acquires lock "WlEglSurfaceRec.mutexFrameSync".
  4. src/wayland-eglsurface.c:260:17: thread2_modifies_field:
     Thread2 sets "framesProcessed" to a new value. Note that this
     write can be reordered at runtime to occur before instructions
     that do not access this field within this locked region. After
     Thread2 leaves the critical section, control is switched back to
     Thread1.
  5. src/wayland-eglsurface.c:255:17: thread1_acquires_lock:
     Thread1 acquires lock "WlEglSurfaceRec.mutexFrameSync".
  6. src/wayland-eglsurface.c:260:17: thread1_overwrites_value_in_field:
     Thread1 sets "framesProcessed" to a new value. Now the two threads
     have an inconsistent view of "framesProcessed" and updates to
     fields correlated with "framesProcessed" may be lost.
  7. src/wayland-eglsurface.c:249:17: use_same_locks_for_read_and_modify:
     Guard the modification of "framesProcessed" and the read used to
     decide whether to modify "framesProcessed" with the same set of
     locks.
  #   258|
  #   259|                ok = wlEglSendDamageEvent(surface, queue);
  #   260|->              surface->ctx.framesProcessed++;
  #   261|
  #   262|                pthread_cond_signal(&surface->condFrameSync);

Fixes: 63e82b0 ("wayland-egl: avoid unnecessary commit")
---
 src/wayland-eglsurface.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/wayland-eglsurface.c b/src/wayland-eglsurface.c
index 6506e27..66e8529 100644
--- a/src/wayland-eglsurface.c
+++ b/src/wayland-eglsurface.c
@@ -339,6 +339,8 @@ damage_thread(void *args)
         // If not done, keep handling frames
         if (ok) {
 
+            pthread_mutex_lock(&surface->mutexFrameSync);
+
             // If there's an unprocessed frame ready, send damage event
             if (surface->ctx.framesFinished !=
                 surface->ctx.framesProcessed) {
@@ -347,8 +349,6 @@ damage_thread(void *args)
                                           surface->ctx.eglStream);
                 }
 
-                pthread_mutex_lock(&surface->mutexFrameSync);
-
                 wlEglCreateFrameSync(surface);
 
                 ok = wlEglSendDamageEvent(surface, queue);
@@ -361,6 +361,8 @@ damage_thread(void *args)
 
             // Otherwise, wait for sync to trigger
             else {
+                pthread_mutex_unlock(&surface->mutexFrameSync);
+
                 ok = (EGL_CONDITION_SATISFIED_KHR ==
                       data->egl.clientWaitSync(display->devDpy->eglDisplay,
                                                surface->ctx.damageThreadSync,

From 59a60d6b440a8cf9e085aad77e85a9d116b9a677 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Do=C4=9Fukan=20Korkmazt=C3=BCrk?= <dkorkmazturk@nvidia.com>
Date: Fri, 26 Jul 2024 09:48:16 -0400
Subject: [PATCH 6/9] egl-wayland: Fix an unbounded array growth issue

We do not seem to shrink the dynamically allocated streamImages array
that we use for storing the resources associated with the swapchain
images. When an entry in this array is destroyed in the
destroy_stream_image() function, its fields are simply reverted to
default/invalid values. Later on, the entries in this array are tried to
be recycled in the add_surface_image() function. However, this approach
is error-prone since we keep valid and invalid entries together, which
requires us to check the validity of the entries every time we access
them. Also, when explicit sync is in use, this array just keeps growing
over time, especially during the application window resizes, due to a
bug in the entry destruction logic.

So, to solve these problems, this change converts the dynamically
allocated streamImages array into a linked list for simplified
insertions and deletions. Each entry in this linked list is removed from
the list and deallocated once they are no longer needed. So, all of the
entries in the list stay valid.

Per-entry mutexes are replaced with a single mutex that guards accesses
to the entire list to make sure that the linked list does not get
corrupted when it is accessed from multiple threads. This only happens
when explicit sync is not in use. The sizes of the critical sections
that are protected by this new mutex are very small. To test to see if
this change creates lock contention issues, weston-simple-egl
application with swap interval of 0 was run on a Wayland compositor that
does not support explicit sync to create as much lock contention as
possible. However, no measurable difference in performance was observed
after this change was applied.

As a side effect of this change, a bug in the
wlEglSurfaceCheckReleasePoints() function, where we wrongly assumed that
all the entries in the streamImages array were valid, is fixed. This bug
caused us to pass destroyed DRM syncobjs to the drmSyncobjTimelineWait()
function, which led to random application freezes as a result in some
cases since it prevented images from being released back to the EGL
stream.

Another side effect of this change is that, it makes the maximum number
of entries in this list known when explicit sync is in use, allowing us
to avoid dynamically allocating the arrays for the list of DRM syncobjs
and timeline points in wlEglSurfaceCheckReleasePoints(). This fixes a
memory leak issue that can happen if only one of these allocations
fails.
---
 include/wayland-eglsurface-internal.h |  30 +--
 src/wayland-eglsurface.c              | 318 ++++++++++++--------------
 2 files changed, 164 insertions(+), 184 deletions(-)

diff --git a/include/wayland-eglsurface-internal.h b/include/wayland-eglsurface-internal.h
index 33ccb26..dfc5fd4 100644
--- a/include/wayland-eglsurface-internal.h
+++ b/include/wayland-eglsurface-internal.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014-2022, NVIDIA CORPORATION. All rights reserved.
+ * Copyright (c) 2014-2024, NVIDIA CORPORATION. All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
@@ -39,14 +39,6 @@ typedef struct WlEglStreamImageRec {
     /* Pointer back to the parent surface for use in Wayland callbacks */
     struct WlEglSurfaceRec *surface;
 
-    /*
-     * Use an individual mutex to guard access to each image's data. This avoids
-     * sharing the surface lock between the app and buffer release event
-     * threads, resulting in simplified lock management and smaller critical
-     * sections.
-     */
-    pthread_mutex_t         mutex;
-
     EGLImageKHR             eglImage;
     struct wl_buffer       *buffer;
     EGLBoolean              attached;
@@ -59,6 +51,14 @@ typedef struct WlEglStreamImageRec {
     uint64_t                releasePoint;
     /* Cached acquire EGLSync from acquireImage */
     EGLSyncKHR              acquireSync;
+
+    /*
+     * Used for delaying the destruction of the image if we are waiting the
+     * buffer release thread to use it later.
+     */
+    EGLBoolean              destructionPending;
+
+    struct wl_list          link;
 } WlEglStreamImage;
 
 typedef struct WlEglSurfaceCtxRec {
@@ -78,14 +78,16 @@ typedef struct WlEglSurfaceCtxRec {
     EGLuint64KHR framesProcessed;
 
     /*
-     * The double pointer is because of the need to allocate the data for each
-     * image slot separately to avoid clobbering the acquiredLink member
-     * whenever the streamImages arrary is resized with realloc().
+     * Use an individual mutex to guard access to streamImages. This helps us
+     * to avoid sharing the surface lock between the app and buffer release
+     * event threads, resulting in simplified lock management and smaller
+     * critical sections.
      */
-    WlEglStreamImage      **streamImages;
+    pthread_mutex_t         streamImagesMutex;
+
+    struct wl_list          streamImages;
     struct wl_list          acquiredImages;
     struct wl_buffer       *currentBuffer;
-    uint32_t                numStreamImages;
 
     struct wl_list link;
 } WlEglSurfaceCtx;
diff --git a/src/wayland-eglsurface.c b/src/wayland-eglsurface.c
index 66e8529..b2018f9 100644
--- a/src/wayland-eglsurface.c
+++ b/src/wayland-eglsurface.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014-2022, NVIDIA CORPORATION. All rights reserved.
+ * Copyright (c) 2014-2024, NVIDIA CORPORATION. All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
@@ -47,6 +47,7 @@
 #include <stdio.h>
 
 #define WL_EGL_WINDOW_DESTROY_CALLBACK_SINCE 3
+#define MAX_IMAGES 4 /* The swapchain image count */
 
 enum BufferReleaseThreadEvents {
     BUFFER_RELEASE_THREAD_EVENT_TERMINATE,
@@ -565,25 +566,25 @@ destroy_stream_image(WlEglDisplay *display,
     WlEglPlatformData   *data     = display->data;
     EGLDisplay           dpy      = display->devDpy->eglDisplay;
 
-    /* Must be called with image->mutex already locked */
-
-    assert(image->eglImage != EGL_NO_IMAGE_KHR);
-    data->egl.destroyImage(dpy, image->eglImage);
-    image->eglImage = EGL_NO_IMAGE_KHR;
-    image->releasePoint = 0;
+    /* Must be called with surface->ctx.streamImagesMutex already locked */
 
     if (surface->ctx.currentBuffer == image->buffer) {
         surface->ctx.currentBuffer = NULL;
     }
 
-    if (image->buffer && !image->attached) {
-        wl_buffer_destroy(image->buffer);
-        image->buffer = NULL;
+    if (!surface->wlSyncobjSurf && image->attached) {
+        // This is used for delaying the destruction of images only when
+        // explicit-sync is not in use to prevent the buffer release thread
+        // from accessing images after they are deallocated.
+        image->destructionPending = EGL_TRUE;
+        return;
     }
 
-    if (!wl_list_empty(&image->acquiredLink)) {
-        wl_list_remove(&image->acquiredLink);
-        wl_list_init(&image->acquiredLink);
+    assert(image->eglImage != EGL_NO_IMAGE_KHR);
+    data->egl.destroyImage(dpy, image->eglImage);
+
+    if (image->buffer) {
+        wl_buffer_destroy(image->buffer);
     }
 
     if (image->wlReleaseTimeline) {
@@ -591,10 +592,13 @@ destroy_stream_image(WlEglDisplay *display,
         drmSyncobjDestroy(display->drmFd, image->drmSyncobjHandle);
         if (image->acquireSync != EGL_NO_SYNC_KHR) {
             data->egl.destroySync(dpy, image->acquireSync);
-            image->acquireSync = EGL_NO_SYNC_KHR;
         }
-        image->releasePending = false;
     }
+
+    wl_list_remove(&image->acquiredLink);
+    wl_list_remove(&image->link);
+
+    free(image);
 }
 
 static void
@@ -606,7 +610,6 @@ destroy_surface_context(WlEglSurface *surface, WlEglSurfaceCtx *ctx)
     EGLSurface         surf     = ctx->eglSurface;
     EGLStreamKHR       stream   = ctx->eglStream;
     void              *resource = ctx->wlStreamResource;
-    uint32_t           i;
 
     finish_wl_eglstream_damage_thread(surface, ctx, 1);
 
@@ -614,16 +617,6 @@ destroy_surface_context(WlEglSurface *surface, WlEglSurfaceCtx *ctx)
     ctx->eglStream        = EGL_NO_STREAM_KHR;
     ctx->wlStreamResource = NULL;
 
-    for (i = 0; i < ctx->numStreamImages; i++) {
-        WlEglStreamImage *image = surface->ctx.streamImages[i];
-
-        pthread_mutex_lock(&image->mutex);
-        if (image->eglImage != EGL_NO_IMAGE_KHR) {
-            destroy_stream_image(display, surface, image);
-        }
-        pthread_mutex_unlock(&image->mutex);
-    }
-
     if (surf != EGL_NO_SURFACE) {
         data->egl.destroySurface(dpy, surf);
     }
@@ -637,7 +630,21 @@ destroy_surface_context(WlEglSurface *surface, WlEglSurfaceCtx *ctx)
         ctx->eglStream = EGL_NO_STREAM_KHR;
     }
 
-    if (resource) {
+    if (!resource) {
+        // streamImages list is not valid when wlStreamResource is in use.
+        WlEglStreamImage *image, *next;
+
+        pthread_mutex_lock(&surface->ctx.streamImagesMutex);
+
+        // Destroy all images. If there are attached images, this will mark
+        // them for destruction. Following buffer release event will destroy
+        // them.
+        wl_list_for_each_safe(image, next, &ctx->streamImages, link) {
+            destroy_stream_image(display, surface, image);
+        }
+
+        pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
+    } else {
         wl_buffer_destroy(resource);
     }
 }
@@ -1039,13 +1046,20 @@ stream_local_buffer_release_callback(void *ptr, struct wl_buffer *buffer)
     WlEglDisplay       *display = surface->wlEglDpy;
     WlEglPlatformData  *data    = display->data;
 
+    pthread_mutex_lock(&surface->ctx.streamImagesMutex);
+
     (void)buffer; /* In case assert() compiles to nothing */
     assert(image->buffer == NULL || image->buffer == buffer);
 
-    pthread_mutex_lock(&image->mutex);
     image->attached = EGL_FALSE;
 
-    if (image->eglImage != EGL_NO_IMAGE_KHR) {
+    if (image->destructionPending) {
+        /*
+         * If there was an attempt to destroy the image while its buffer was
+         * attached, the buffer destruction was deferred. Clean it up now.
+         */
+        destroy_stream_image(display, surface, image);
+    } else {
         /*
          * Release our image back to the stream if explicit sync is not in use
          *
@@ -1054,20 +1068,15 @@ stream_local_buffer_release_callback(void *ptr, struct wl_buffer *buffer)
          * on the release sync getting signaled. This callback doesn't even fire
          * in that scenario.
          */
+        assert(image->eglImage != EGL_NO_IMAGE_KHR);
+
         data->egl.streamReleaseImage(display->devDpy->eglDisplay,
                                      surface->ctx.eglStream,
                                      image->eglImage,
                                      EGL_NO_SYNC_KHR);
-    } else if (image->buffer) {
-        /*
-         * If the image has been destroyed while the buffer was attached
-         * the buffer destruction was deferred. Clean it up now.
-         */
-        wl_buffer_destroy(image->buffer);
-        image->buffer = NULL;
     }
 
-    pthread_mutex_unlock(&image->mutex);
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 }
 
 static const struct wl_buffer_listener stream_local_buffer_listener = {
@@ -1135,9 +1144,10 @@ wlEglSurfaceCheckReleasePoints(WlEglDisplay *display, WlEglSurface *surface)
     EGLDisplay          dpy         = display->devDpy->eglDisplay;
     EGLSyncKHR          releaseSync = EGL_NO_SYNC_KHR;
     WlEglStreamImage   *image = NULL;
-    uint32_t           *syncobjs;
-    uint64_t           *syncPoints;
-    uint32_t            i, firstSignaled, numSyncPoints = 0;
+    WlEglStreamImage   *streamImages[MAX_IMAGES];
+    uint32_t            syncobjs[MAX_IMAGES];
+    uint64_t            syncPoints[MAX_IMAGES];
+    uint32_t            firstSignaled, numSyncPoints = 0;
     int64_t             timeout;
     EGLBoolean          ret = EGL_FALSE;
 
@@ -1145,30 +1155,22 @@ wlEglSurfaceCheckReleasePoints(WlEglDisplay *display, WlEglSurface *surface)
         return EGL_TRUE;
     }
 
-    syncobjs = calloc(surface->ctx.numStreamImages, sizeof(uint32_t));
-    syncPoints = calloc(surface->ctx.numStreamImages, sizeof(uint64_t));
-    if (!syncobjs || !syncPoints) {
-        return EGL_FALSE;
-    }
-
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        pthread_mutex_lock(&surface->ctx.streamImages[i]->mutex);
-    }
+    pthread_mutex_lock(&surface->ctx.streamImagesMutex);
 
     /* record each release point we are waiting on */
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        syncobjs[i] = surface->ctx.streamImages[i]->drmSyncobjHandle;
+    wl_list_for_each(image, &surface->ctx.streamImages, link) {
+        if (image->releasePending) {
+            if (numSyncPoints >= MAX_IMAGES) {
+                assert(!"The number of the pending sync points is more \
+                         than the expected size of the swapchain");
+                break;
+            }
+
+            streamImages[numSyncPoints] = image;
+            syncobjs[numSyncPoints] = image->drmSyncobjHandle;
+            syncPoints[numSyncPoints] = image->releasePoint;
 
-        if (surface->ctx.streamImages[i]->releasePending) {
-            syncPoints[i] = surface->ctx.streamImages[i]->releasePoint;
             numSyncPoints++;
-        } else {
-            /*
-             * Use a bogus point for acquired images so we can keep our indices
-             * the same. This won't affect anything since it will never have a fence
-             * appear.
-             */
-            syncPoints[i] = UINT64_MAX;
         }
     }
 
@@ -1200,13 +1202,15 @@ wlEglSurfaceCheckReleasePoints(WlEglDisplay *display, WlEglSurface *surface)
      * signal correctly.
      */
     if (drmSyncobjTimelineWait(display->drmFd, syncobjs, syncPoints,
-                               surface->ctx.numStreamImages, timeout,
-                               DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
-                               &firstSignaled) != 0) {
+                           numSyncPoints, timeout,
+                           DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
+                           &firstSignaled) != 0) {
+        /* A timeout is the only type of error we expect here */
+        assert(errno == ETIME);
         goto end;
     }
 
-    image = surface->ctx.streamImages[firstSignaled];
+    image = streamImages[firstSignaled];
 
     /* Try to get a release point for the first available buffer.  */
     releaseSync = get_release_sync(display, image);
@@ -1236,12 +1240,7 @@ wlEglSurfaceCheckReleasePoints(WlEglDisplay *display, WlEglSurface *surface)
     }
 
 end:
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        pthread_mutex_unlock(&surface->ctx.streamImages[i]->mutex);
-    }
-
-    free(syncPoints);
-    free(syncobjs);
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 
     return ret;
 }
@@ -1260,9 +1259,9 @@ acquire_surface_image(WlEglDisplay *display, WlEglSurface *surface)
     int                 planes;
     EGLint              stride;
     EGLint              offset;
-    uint32_t            i;
     int                 fd;
     EGLSyncKHR          acquireSync = EGL_NO_SYNC_KHR;
+    EGLBoolean          found = EGL_FALSE;
     const EGLint attribs[] = {
         EGL_SYNC_NATIVE_FENCE_FD_ANDROID, EGL_NO_NATIVE_FENCE_FD_ANDROID,
         EGL_SYNC_STATUS, EGL_SIGNALED,
@@ -1291,19 +1290,20 @@ acquire_surface_image(WlEglDisplay *display, WlEglSurface *surface)
         }
     }
 
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        if (surface->ctx.streamImages[i]->eglImage == eglImage) {
-            image = surface->ctx.streamImages[i];
+    pthread_mutex_lock(&surface->ctx.streamImagesMutex);
+
+    // Locate the corresponding WlEglStreamImage
+    wl_list_for_each(image, &surface->ctx.streamImages, link) {
+        if (image->eglImage == eglImage) {
+            found = EGL_TRUE;
             break;
         }
     }
 
-    if (!image) {
-        goto fail_destroy_sync;
+    if (!found) {
+        goto fail_release;
     }
 
-    pthread_mutex_lock(&image->mutex);
-
     image->acquireSync = acquireSync;
 
     if (!image->buffer) {
@@ -1382,7 +1382,7 @@ acquire_surface_image(WlEglDisplay *display, WlEglSurface *surface)
     /* Add image to the end of the acquired images list */
     wl_list_insert(surface->ctx.acquiredImages.prev, &image->acquiredLink);
 
-    pthread_mutex_unlock(&image->mutex);
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 
     return EGL_SUCCESS;
 
@@ -1393,15 +1393,16 @@ acquire_surface_image(WlEglDisplay *display, WlEglSurface *surface)
                                  eglImage,
                                  EGL_NO_SYNC_KHR);
 
-    if (image && image->acquireSync != EGL_NO_SYNC_KHR) {
-        data->egl.destroySync(dpy, image->acquireSync);
-        image->acquireSync = EGL_NO_SYNC_KHR;
+    if (acquireSync != EGL_NO_SYNC_KHR) {
+        data->egl.destroySync(dpy, acquireSync);
+        if (found) {
+            assert(image->acquireSync == acquireSync);
+            image->acquireSync = EGL_NO_SYNC_KHR;
+        }
     }
 
-    if (image) {
-        /* Release the image lock */
-        pthread_mutex_unlock(&image->mutex);
-    }
+    /* Release the image lock */
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 
     return EGL_BAD_SURFACE;
 
@@ -1417,19 +1418,19 @@ remove_surface_image(WlEglDisplay *display,
                      WlEglSurface *surface,
                      EGLImageKHR eglImage)
 {
-    WlEglStreamImage    *image;
-    uint32_t             i;
-    EGLBoolean           found = EGL_FALSE;
+    WlEglStreamImage *image;
+
+    pthread_mutex_lock(&surface->ctx.streamImagesMutex);
 
-    for (i = 0; i < surface->ctx.numStreamImages && found == EGL_FALSE; i++) {
-        image = surface->ctx.streamImages[i];
-        pthread_mutex_lock(&image->mutex);
+    wl_list_for_each(image, &surface->ctx.streamImages, link) {
+        /* Safe only because the iteration is aborted by a break statement */
         if (image->eglImage == eglImage) {
-            found = EGL_TRUE;
             destroy_stream_image(display, surface, image);
+            break;
         }
-        pthread_mutex_unlock(&image->mutex);
     }
+
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 }
 
 static WlEglStreamImage *
@@ -1505,6 +1506,9 @@ init_surface_image(WlEglDisplay *display, WlEglSurface *surface,
         close(drmSyncobjFd);
     }
 
+    image->surface = surface;
+    wl_list_init(&image->acquiredLink);
+
     return EGL_SUCCESS;
 
 fail:
@@ -1523,68 +1527,24 @@ init_surface_image(WlEglDisplay *display, WlEglSurface *surface,
 static EGLint
 add_surface_image(WlEglDisplay *display, WlEglSurface *surface)
 {
-    WlEglStreamImage   **newImages;
-    WlEglStreamImage    *image;
-    EGLint               ret;
-    uint32_t             i;
-
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        image = surface->ctx.streamImages[i];
-        pthread_mutex_lock(&image->mutex);
-        if ((image->eglImage == EGL_NO_IMAGE_KHR) && !image->buffer) {
-            ret = init_surface_image(display, surface, image);
-
-            pthread_mutex_unlock(&image->mutex);
-            return ret;
-        }
-        pthread_mutex_unlock(&image->mutex);
-    }
-
-    newImages = realloc(surface->ctx.streamImages,
-                        sizeof(newImages[0]) *
-                        (surface->ctx.numStreamImages + 1));
+    WlEglStreamImage* const image = calloc(1, sizeof(*image));
+    EGLint ret;
 
-    if (!newImages) {
+    if (!image) {
         return EGL_BAD_ALLOC;
     }
 
-    surface->ctx.streamImages = newImages;
-
-    newImages[i] = calloc(1, sizeof(*newImages[i]));
-
-    if (!surface->ctx.streamImages[i]) {
-        goto free_image;
-    }
-
-    newImages[i]->surface = surface;
-
-    /*
-     * No need to lock the mutex after allocating because numStreamImages is not
-     * incremented until after the image itself is initialized. Also, because
-     * numStreamImages is not incremented until initialization is complete, the
-     * image must be freed if initialization fails beyond this point to avoid
-     * leaks.
-     */
-    if (!wlEglInitializeMutex(&newImages[i]->mutex)) {
-        goto free_image;
-    }
-
-    wl_list_init(&newImages[i]->acquiredLink);
-
-    if (init_surface_image(display, surface, newImages[i]) != EGL_SUCCESS) {
-        wlEglMutexDestroy(&newImages[i]->mutex);
-        goto free_image;
+    ret = init_surface_image(display, surface, image);
+    if (ret != EGL_SUCCESS) {
+        free(image);
+        return ret;
     }
 
-    surface->ctx.numStreamImages++;
+    pthread_mutex_lock(&surface->ctx.streamImagesMutex);
+    wl_list_insert(&surface->ctx.streamImages, &image->link);
+    pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 
     return EGL_SUCCESS;
-
-free_image:
-    free(newImages[i]);
-    newImages[i] = NULL;
-
-    return EGL_BAD_ALLOC;
 }
 
 EGLint wlEglHandleImageStreamEvents(WlEglSurface *surface)
@@ -2474,25 +2434,19 @@ EGLBoolean wlEglSurfaceRef(WlEglDisplay *display, WlEglSurface *surface)
 
 void wlEglSurfaceUnref(WlEglSurface *surface)
 {
-    uint32_t i;
-
     surface->refCount--;
     if (surface->refCount > 0) {
         return;
     }
 
     wlEglMutexDestroy(&surface->mutexLock);
+    wlEglMutexDestroy(&surface->ctx.streamImagesMutex);
 
     if (!surface->ctx.isOffscreen) {
         wlEglMutexDestroy(&surface->mutexFrameSync);
         pthread_cond_destroy(&surface->condFrameSync);
     }
 
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        wlEglMutexDestroy(&surface->ctx.streamImages[i]->mutex);
-        free(surface->ctx.streamImages[i]);
-    }
-    free(surface->ctx.streamImages);
     free(surface);
 
     return;
@@ -2502,10 +2456,6 @@ static EGLBoolean wlEglDestroySurface(EGLDisplay dpy, EGLSurface eglSurface)
 {
     WlEglDisplay *display = (WlEglDisplay*)dpy;
     WlEglSurface *surface = (WlEglSurface*)eglSurface;
-    WlEglSurfaceCtx       *ctx     = NULL;
-    WlEglSurfaceCtx       *next    = NULL;
-    WlEglStreamImage      *image;
-    uint32_t i;
 
     if (!wlEglIsWlEglSurfaceForDisplay(display, surface) ||
         display != surface->wlEglDpy) {
@@ -2521,6 +2471,9 @@ static EGLBoolean wlEglDestroySurface(EGLDisplay dpy, EGLSurface eglSurface)
     destroy_surface_context(surface, &surface->ctx);
 
     if (!surface->ctx.isOffscreen) {
+        WlEglSurfaceCtx *ctx;
+        WlEglSurfaceCtx *next;
+
         // We only expect a valid wlEglWin to be set when using
         // a surface created with EGL_KHR_platform_wayland.
         if (wlEglIsWaylandDisplay(display->nativeDpy) &&
@@ -2564,26 +2517,45 @@ static EGLBoolean wlEglDestroySurface(EGLDisplay dpy, EGLSurface eglSurface)
         surface->wlEventQueue = NULL;
     }
 
-    for (i = 0; i < surface->ctx.numStreamImages; i++) {
-        image = surface->ctx.streamImages[i];
-        pthread_mutex_lock(&image->mutex);
+    if (surface->wlBufferEventQueue) {
+        /*
+         * If explicit sync is in use, the stream images are destroyed when
+         * destroy_surface_context() is called above.
+         */
+        WlEglStreamImage *image;
+        WlEglStreamImage *nextImage;
 
+        pthread_mutex_lock(&surface->ctx.streamImagesMutex);
         /*
          * Destroy any attached buffers to ensure no further buffer release
          * events are delivered after the buffer release queue and thread are
          * torn down.
+         *
+         * Do not destroy the WlEglStreamImages here because they may be
+         * in-flight and as soon as we unlock streamImagesMutex, the buffer
+         * release thread may access them.
          */
-        if (image->buffer) {
-            assert(image->attached);
-            wl_buffer_destroy(image->buffer);
-            image->buffer = NULL;
-            image->attached = EGL_FALSE;
+        wl_list_for_each(image, &surface->ctx.streamImages, link) {
+            if (image->buffer) {
+                assert(image->attached);
+                wl_buffer_destroy(image->buffer);
+                image->buffer = NULL;
+                image->attached = EGL_FALSE;
+            }
         }
+        pthread_mutex_unlock(&surface->ctx.streamImagesMutex);
 
-        pthread_mutex_unlock(&image->mutex);
-    }
+        finish_wl_buffer_release_thread(surface);
 
-    finish_wl_buffer_release_thread(surface);
+        /*
+         * If there are remaining images in the streamImages list, destroy them
+         * here safely since the buffer release thread is no longer running.
+         */
+        wl_list_for_each_safe(image, nextImage, &surface->ctx.streamImages, link) {
+            destroy_stream_image(display, surface, image);
+        }
+    }
+    assert(wl_list_empty(&surface->ctx.streamImages));
 
     // Release WlEglSurface lock.
     pthread_mutex_unlock(&surface->mutexLock);
@@ -2703,11 +2675,17 @@ EGLSurface wlEglCreatePlatformWindowSurfaceHook(EGLDisplay dpy,
         goto fail;
     }
 
+    if (!wlEglInitializeMutex(&surface->ctx.streamImagesMutex)) {
+        err = EGL_BAD_ALLOC;
+        goto fail;
+    }
+
     if (pthread_cond_init(&surface->condFrameSync, NULL)) {
         err = EGL_BAD_ALLOC;
         goto fail;
     }
 
+    wl_list_init(&surface->ctx.streamImages);
 
     surface->wlEglDpy = display;
     surface->eglConfig = config;

From 7c55e09e80e305ecb0b59e4771f852c4acb70827 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Do=C4=9Fukan=20Korkmazt=C3=BCrk?= <dkorkmazturk@nvidia.com>
Date: Wed, 31 Jul 2024 14:06:37 -0400
Subject: [PATCH 7/9] egl-wayland: Verify that errno is ETIME only on Linux

BSD variants do not define ETIME. So, the assert() call which verifies
that errno is set to ETIME introduced in an earlier change could cause
problems with debug builds on BSDs. This change adds preprocessor
directives to limit that assertion to Linux.
---
 src/wayland-eglsurface.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/wayland-eglsurface.c b/src/wayland-eglsurface.c
index b2018f9..a1766bd 100644
--- a/src/wayland-eglsurface.c
+++ b/src/wayland-eglsurface.c
@@ -1206,7 +1206,9 @@ wlEglSurfaceCheckReleasePoints(WlEglDisplay *display, WlEglSurface *surface)
                            DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
                            &firstSignaled) != 0) {
         /* A timeout is the only type of error we expect here */
+#ifdef ETIME
         assert(errno == ETIME);
+#endif
         goto end;
     }
 

From 1749920e41d65bf5d01bde266cc94d1779bde009 Mon Sep 17 00:00:00 2001
From: Austin Shafer <ashafer@badland.io>
Date: Wed, 31 Jul 2024 14:37:56 -0400
Subject: [PATCH 8/9] egl-wayland: check for driver explicit sync support

This uses some error conditions added by CL 33837064 to check if
we can actually do explicit sync or if we should fall back. The problem
is that we currently do not have a good version detection mechanism
available for us to do this with, so we give EGL an invalid fd+status
combo to trigger a condition that was added by the same CL as what
we need.
---
 include/wayland-egldisplay.h |  2 ++
 src/wayland-egldisplay.c     | 56 +++++++++++++++++++++++++++++++++++-
 2 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/include/wayland-egldisplay.h b/include/wayland-egldisplay.h
index 29318e3..8df5e5d 100644
--- a/include/wayland-egldisplay.h
+++ b/include/wayland-egldisplay.h
@@ -123,6 +123,8 @@ typedef struct WlEglDisplayRec {
 
     /* Supports EGL_ANDROID_native_fence_sync */
     int supports_native_fence_sync;
+    /* Underlying driver version is recent enough for explicit sync */
+    int supports_explicit_sync;
 
     EGLBoolean         ownNativeDpy;
     struct wl_display *nativeDpy;
diff --git a/src/wayland-egldisplay.c b/src/wayland-egldisplay.c
index dd74f4b..07f146e 100644
--- a/src/wayland-egldisplay.c
+++ b/src/wayland-egldisplay.c
@@ -456,7 +456,8 @@ registry_handle_global(void *data,
                                                    &wp_presentation_interface,
                                                    version);
     } else if (strcmp(interface, "wp_linux_drm_syncobj_manager_v1") == 0 &&
-               display->supports_native_fence_sync) {
+               display->supports_native_fence_sync &&
+               display->supports_explicit_sync) {
         display->wlDrmSyncobj = wl_registry_bind(registry,
                                                  name,
                                                  &wp_linux_drm_syncobj_manager_v1_interface,
@@ -1219,6 +1220,56 @@ EGLDisplay wlEglGetPlatformDisplayExport(void *data,
     return EGL_NO_DISPLAY;
 }
 
+static void wlEglCheckDriverSyncSupport(WlEglDisplay *display)
+{
+    EGLSyncKHR  eglSync = EGL_NO_SYNC_KHR;
+    int         syncFd  = -1;
+    EGLDisplay  dpy     = display->devDpy->eglDisplay;
+    EGLint      attribs[5];
+    uint32_t    tmpSyncobj;
+
+    if (!display->supports_native_fence_sync) {
+        return;
+    }
+
+    /* make a dummy fd to pass in */
+    if (drmSyncobjCreate(display->drmFd, 0, &tmpSyncobj) != 0) {
+        return;
+    }
+
+    if (drmSyncobjHandleToFD(display->drmFd, tmpSyncobj, &syncFd)) {
+        goto destroy;
+    }
+
+    /*
+     * This call is supposed to fail if the driver is new enough to support
+     * Explicit Sync. Since we don't have an easy way to detect the driver
+     * version number at the moment, we check for some error conditions added
+     * as part of the EGL driver support. Here we check that specifying a valid
+     * fd and a sync object status returns EGL_BAD_ATTRIBUTE.
+     */
+    attribs[0] = EGL_SYNC_NATIVE_FENCE_FD_ANDROID;
+    attribs[1] = syncFd;
+    attribs[2] = EGL_SYNC_STATUS;
+    attribs[3] = EGL_SIGNALED;
+    attribs[4] = EGL_NONE;
+    eglSync = display->data->egl.createSync(dpy, EGL_SYNC_NATIVE_FENCE_ANDROID,
+                                            attribs);
+    close (syncFd);
+
+    /* If the call failed then the driver version is recent enough */
+    if (eglSync == EGL_NO_SYNC_KHR &&
+        display->data->egl.getError() == EGL_BAD_ATTRIBUTE) {
+        display->supports_explicit_sync = true;
+    }
+
+destroy:
+    if (eglSync != EGL_NO_SYNC_KHR) {
+        display->data->egl.destroySync(dpy, eglSync);
+    }
+    drmSyncobjDestroy(display->drmFd, tmpSyncobj);
+}
+
 EGLBoolean wlEglInitializeHook(EGLDisplay dpy, EGLint *major, EGLint *minor)
 {
     WlEglDisplay      *display = wlEglAcquireDisplay(dpy);
@@ -1262,6 +1313,9 @@ EGLBoolean wlEglInitializeHook(EGLDisplay dpy, EGLint *major, EGLint *minor)
         display->supports_native_fence_sync = true;
     }
 
+    /* Check if we support explicit sync */
+    wlEglCheckDriverSyncSupport(display);
+
     // Set the initCount to 1. If something goes wrong, then terminateDisplay
     // will clean up and set it back to zero.
     display->initCount = 1;

From e1216b5fd7a43fac3ad620a498a2baa8065279b1 Mon Sep 17 00:00:00 2001
From: Austin Shafer <ashafer@badland.io>
Date: Wed, 31 Jul 2024 15:02:06 -0400
Subject: [PATCH 9/9] egl-wayland: Add __NV_DISABLE_EXPLICIT_SYNC environment
 variable

There are still many application bugs caused by incorrect threading
guarantees when running with explicit sync. This change implements
a method for users to disable explicit sync manually for a particular
application, in case there are issues with explicit sync.

Setting __NV_DISABLE_EXPLICIT_SYNC=1 will prevent the usage of
explicit sync and fall back to the old method.
---
 src/wayland-egldisplay.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/wayland-egldisplay.c b/src/wayland-egldisplay.c
index 07f146e..33ae61c 100644
--- a/src/wayland-egldisplay.c
+++ b/src/wayland-egldisplay.c
@@ -1227,8 +1227,14 @@ static void wlEglCheckDriverSyncSupport(WlEglDisplay *display)
     EGLDisplay  dpy     = display->devDpy->eglDisplay;
     EGLint      attribs[5];
     uint32_t    tmpSyncobj;
+    const char *disableExplicitSyncStr = getenv("__NV_DISABLE_EXPLICIT_SYNC");
 
-    if (!display->supports_native_fence_sync) {
+    /*
+     * Don't enable explicit sync if requested by the user or if we do not have
+     * the necessary EGL extensions.
+     */
+    if ((disableExplicitSyncStr && !strcmp(disableExplicitSyncStr, "1")) ||
+        !display->supports_native_fence_sync) {
         return;
     }
 
