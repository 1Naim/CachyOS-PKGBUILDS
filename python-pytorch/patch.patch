diff --git a/PKGBUILD b/PKGBUILD
index ddf6b91..c0cf34d 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -4,10 +4,10 @@
 
 _pkgname=pytorch
 pkgbase="python-${_pkgname}"
-pkgname=("${pkgbase}" "${pkgbase}-opt" "${pkgbase}-cuda" "${pkgbase}-opt-cuda" "${pkgbase}-rocm" "${pkgbase}-opt-rocm")
-pkgver=2.2.1
-_pkgver=2.2.1
-pkgrel=1
+pkgname=( "${pkgbase}-avx512-cuda")
+pkgver=2.2.0
+_pkgver=2.2.0
+pkgrel=4
 _pkgdesc='Tensors and Dynamic neural networks in Python with strong GPU acceleration'
 pkgdesc="${_pkgdesc}"
 arch=('x86_64')
@@ -18,7 +18,7 @@ depends=('google-glog' 'gflags' 'opencv' 'openmp' 'openmpi' 'pybind11' 'python'
          'intel-oneapi-mkl' 'python-typing_extensions' 'numactl' 'python-jinja'
          'python-networkx' 'python-filelock')
 makedepends=('python' 'python-setuptools' 'python-yaml' 'python-numpy' 'cmake' 'cuda'
-             'nccl' 'cudnn' 'git' 'rocm-hip-sdk' 'roctracer' 'miopen' 'magma-cuda' 'magma-hip'
+             'nccl' 'cudnn' 'git' 'magma-cuda'
              'ninja' 'pkgconfig' 'doxygen' 'vulkan-headers' 'shaderc' 'onednn')
 source=("${_pkgname}::git+https://github.com/pytorch/pytorch.git#tag=v$_pkgver"
         # generated using parse-submodules
@@ -243,11 +243,7 @@ prepare() {
 
   cd "${srcdir}"
 
-  cp -r "${_pkgname}" "${_pkgname}-opt"
-  cp -r "${_pkgname}" "${_pkgname}-cuda"
-  cp -r "${_pkgname}" "${_pkgname}-opt-cuda"
-  cp -r "${_pkgname}" "${_pkgname}-rocm"
-  cp -r "${_pkgname}" "${_pkgname}-opt-rocm"
+  cp -r "${_pkgname}" "${_pkgname}-avx512-cuda"
 }
 
 # Common build configuration, called in all package() functions.
@@ -303,75 +299,18 @@ build() {
   cd "${srcdir}/${_pkgname}"
   echo "Building without cuda or rocm and without non-x86-64 optimizations"
   _prepare
-  export USE_CUDA=0
-  export USE_CUDNN=0
-  export USE_ROCM=0
-  echo "add_definitions(-march=x86-64)" >> cmake/MiscCheck.cmake
-  # this horrible hack is necessary because the current release
-  # ships inconsistent CMake which tries to build objects before
-  # their dependencies, build twice when dependencies are available
-  python setup.py build || python setup.py build
-
-  cd "${srcdir}/${_pkgname}-opt"
-  echo "Building without cuda or rocm and with non-x86-64 optimizations"
-  _prepare
-  export USE_CUDA=0
-  export USE_CUDNN=0
-  export USE_ROCM=0
-  echo "add_definitions(-march=haswell)" >> cmake/MiscCheck.cmake
-  # same horrible hack as above
-  python setup.py build || python setup.py build
-
-  cd "${srcdir}/${_pkgname}-cuda"
-  echo "Building with cuda and without non-x86-64 optimizations"
-  _prepare
-  export USE_CUDA=1
-  export USE_CUDNN=1
-  export USE_ROCM=0
-  export MAGMA_HOME=/opt/cuda/targets/x86_64-linux
-  cd "${srcdir}/${_pkgname}-cuda"
-  echo "add_definitions(-march=x86-64)" >> cmake/MiscCheck.cmake
-  # same horrible hack as above
-  python setup.py build || python setup.py build
 
-  cd "${srcdir}/${_pkgname}-opt-cuda"
-  echo "Building with cuda and with non-x86-64 optimizations"
+  cd "${srcdir}/${_pkgname}-avx512-cuda"
+  echo "Building with cuda and with avx512 optimizations"
   export USE_CUDA=1
   export USE_CUDNN=1
   export USE_ROCM=0
   export MAGMA_HOME=/opt/cuda/targets/x86_64-linux
   _prepare
-  echo "add_definitions(-march=haswell)" >> cmake/MiscCheck.cmake
+  echo "add_definitions(-march=x86-64-v4)" >> cmake/MiscCheck.cmake
   # same horrible hack as above
   python setup.py build || python setup.py build
 
-  cd "${srcdir}/${_pkgname}-rocm"
-  echo "Building with rocm and without non-x86-64 optimizations"
-  _prepare
-  export USE_CUDA=0
-  export USE_CUDNN=0
-  export USE_ROCM=1
-  export MAGMA_HOME=/opt/rocm
-  echo "add_definitions(-march=x86-64)" >> cmake/MiscCheck.cmake
-  # Conversion of CUDA to ROCm source files
-  python tools/amd_build/build_amd.py
-  patch -Np1 -i "$srcdir/pytorch-rocm-jit.patch"
-  # same horrible hack as above
-  python setup.py build || python setup.py build
-  
-  cd "${srcdir}/${_pkgname}-opt-rocm"
-  echo "Building with rocm and with non-x86-64 optimizations"
-  _prepare
-  export USE_CUDA=0
-  export USE_CUDNN=0
-  export USE_ROCM=1
-  export MAGMA_HOME=/opt/rocm
-  echo "add_definitions(-march=haswell)" >> cmake/MiscCheck.cmake
-  # Conversion of CUDA to ROCm source files
-  python tools/amd_build/build_amd.py
-  patch -Np1 -i "$srcdir/pytorch-rocm-jit.patch"
-  # same horrible hack as above
-  python setup.py build || python setup.py build
 }
 
 _package() {
@@ -405,59 +344,13 @@ _package() {
   done
 }
 
-package_python-pytorch() {
-  pkgdesc="${_pkgdesc}"
-
-  cd "${srcdir}/${_pkgname}"
-  _package
-}
-
-package_python-pytorch-opt() {
-  pkgdesc="${_pkgdesc} (with AVX2 CPU optimizations)"
-  conflicts=(python-pytorch)
-  provides=(python-pytorch=${pkgver})
-
-  cd "${srcdir}/${_pkgname}-opt"
-  _package
-}
-
-package_python-pytorch-cuda() {
-  pkgdesc="${_pkgdesc} (with CUDA)"
-  depends+=(cuda nccl cudnn magma-cuda onednn)
-  conflicts=(python-pytorch)
-  provides=(python-pytorch=${pkgver})
-
-  cd "${srcdir}/${_pkgname}-cuda"
-  _package
-}
-
-package_python-pytorch-opt-cuda() {
-  pkgdesc="${_pkgdesc} (with CUDA and AVX2 CPU optimizations)"
+package_python-pytorch-avx512-cuda() {
+  pkgdesc="${_pkgdesc} (with CUDA and AVX512 CPU optimizations)"
   depends+=(cuda nccl cudnn magma-cuda onednn)
   conflicts=(python-pytorch)
   provides=(python-pytorch=${pkgver} python-pytorch-cuda=${pkgver})
 
-  cd "${srcdir}/${_pkgname}-opt-cuda"
-  _package
-}
-
-package_python-pytorch-rocm() {
-  pkgdesc="${_pkgdesc} (with ROCm)"
-  depends+=(rocm-hip-sdk roctracer miopen magma-hip onednn)
-  conflicts=(python-pytorch)
-  provides=(python-pytorch=${pkgver})
-
-  cd "${srcdir}/${_pkgname}-rocm"
-  _package
-}
-
-package_python-pytorch-opt-rocm() {
-  pkgdesc="${_pkgdesc} (with ROCm and AVX2 CPU optimizations)"
-  depends+=(rocm-hip-sdk roctracer miopen magma-hip onednn)
-  conflicts=(python-pytorch)
-  provides=(python-pytorch=${pkgver} python-pytorch-rocm=${pkgver})
-
-  cd "${srcdir}/${_pkgname}-opt-rocm"
+  cd "${srcdir}/${_pkgname}-avx512-cuda"
   _package
 }
 
