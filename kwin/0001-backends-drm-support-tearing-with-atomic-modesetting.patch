From 61c798490de70e597c23b8b779c4026c0c69e594 Mon Sep 17 00:00:00 2001
From: Xaver Hugl <xaver.hugl@gmail.com>
Date: Sat, 16 Dec 2023 22:44:57 +0100
Subject: [PATCH] backends/drm: support tearing with atomic modesetting

With atomic modesetting, tearing is currently only supported by the kernel if only
the FB_ID property of the primary plane is use in the atomic commit. To work around
that restriction until drivers lift it, store a summary of past atomic commits in
the commit thread, and only commit the difference to that while tearing is active.
---
 src/backends/drm/drm_commit.cpp        | 53 +++++++++++++++++++-------
 src/backends/drm/drm_commit.h          | 10 +++--
 src/backends/drm/drm_commit_thread.cpp | 35 +++++++++++++++--
 src/backends/drm/drm_commit_thread.h   |  5 +++
 src/backends/drm/drm_gpu.cpp           |  6 ++-
 src/backends/drm/drm_output.cpp        | 15 ++++++--
 src/backends/drm/drm_output.h          |  2 +
 src/backends/drm/drm_pipeline.cpp      | 17 ++++++++-
 8 files changed, 117 insertions(+), 26 deletions(-)

diff --git a/src/backends/drm/drm_commit.cpp b/src/backends/drm/drm_commit.cpp
index 963e4f9fed..45dc29d899 100644
--- a/src/backends/drm/drm_commit.cpp
+++ b/src/backends/drm/drm_commit.cpp
@@ -63,7 +63,8 @@ void DrmAtomicCommit::addBuffer(DrmPlane *plane, const std::shared_ptr<DrmFrameb
     m_buffers[plane] = buffer;
     m_frames[plane] = frame;
     // atomic commits with IN_FENCE_FD fail with NVidia
-    if (plane->inFenceFd.isValid() && !plane->gpu()->isNVidia()) {
+    // and also with tearing (as of kernel 6.8, should be fixed later)
+    if (plane->inFenceFd.isValid() && !plane->gpu()->isNVidia() && !m_tearing) {
         addProperty(plane->inFenceFd, buffer ? buffer->syncFd().get() : -1);
     }
     m_planes.emplace(plane);
@@ -82,14 +83,19 @@ void DrmAtomicCommit::setVrr(DrmCrtc *crtc, bool vrr)
     m_vrr = vrr;
 }
 
+void DrmAtomicCommit::setTearing(bool enable)
+{
+    m_tearing = enable;
+}
+
 void DrmAtomicCommit::setPresentationMode(PresentationMode mode)
 {
     m_mode = mode;
 }
 
-bool DrmAtomicCommit::test()
+bool DrmAtomicCommit::test(DrmAtomicCommit *currentState)
 {
-    return doCommit(DRM_MODE_ATOMIC_TEST_ONLY | DRM_MODE_ATOMIC_NONBLOCK);
+    return doCommit(DRM_MODE_ATOMIC_TEST_ONLY | DRM_MODE_ATOMIC_NONBLOCK | (m_tearing ? DRM_MODE_PAGE_FLIP_ASYNC : 0), currentState);
 }
 
 bool DrmAtomicCommit::testAllowModeset()
@@ -97,9 +103,9 @@ bool DrmAtomicCommit::testAllowModeset()
     return doCommit(DRM_MODE_ATOMIC_TEST_ONLY | DRM_MODE_ATOMIC_ALLOW_MODESET);
 }
 
-bool DrmAtomicCommit::commit()
+bool DrmAtomicCommit::commit(DrmAtomicCommit *currentState)
 {
-    return doCommit(DRM_MODE_ATOMIC_NONBLOCK | DRM_MODE_PAGE_FLIP_EVENT);
+    return doCommit(DRM_MODE_ATOMIC_NONBLOCK | DRM_MODE_PAGE_FLIP_EVENT | (m_tearing ? DRM_MODE_PAGE_FLIP_ASYNC : 0), currentState);
 }
 
 bool DrmAtomicCommit::commitModeset()
@@ -108,7 +114,7 @@ bool DrmAtomicCommit::commitModeset()
     return doCommit(DRM_MODE_ATOMIC_ALLOW_MODESET);
 }
 
-bool DrmAtomicCommit::doCommit(uint32_t flags)
+bool DrmAtomicCommit::doCommit(uint32_t flags, DrmAtomicCommit *currentState)
 {
     std::vector<uint32_t> objects;
     std::vector<uint32_t> propertyCounts;
@@ -116,18 +122,31 @@ bool DrmAtomicCommit::doCommit(uint32_t flags)
     std::vector<uint64_t> values;
     objects.reserve(m_properties.size());
     propertyCounts.reserve(m_properties.size());
-    uint64_t totalPropertiesCount = 0;
-    for (const auto &[object, properties] : m_properties) {
-        objects.push_back(object);
-        propertyCounts.push_back(properties.size());
-        totalPropertiesCount += properties.size();
-    }
-    propertyIds.reserve(totalPropertiesCount);
-    values.reserve(totalPropertiesCount);
     for (const auto &[object, properties] : m_properties) {
+        size_t i = 0;
         for (const auto &[property, value] : properties) {
+            // The kernel rejects async commits that contain anything else than FB_ID of the primary plane,
+            // even if the property values aren't actually modified.
+            // To make async commits still possible, filter out properties that haven't changed on our side
+            if (m_tearing && currentState) {
+                const auto objIt = currentState->m_properties.find(object);
+                if (objIt != currentState->m_properties.end()) {
+                    const auto propIt = objIt->second.find(property);
+                    if (propIt != objIt->second.end()) {
+                        const uint64_t previousValue = propIt->second;
+                        if (previousValue == value) {
+                            continue;
+                        }
+                    }
+                }
+            }
             propertyIds.push_back(property);
             values.push_back(value);
+            i++;
+        }
+        if (i > 0) {
+            objects.push_back(object);
+            propertyCounts.push_back(i);
         }
     }
     drm_mode_atomic commitData{
@@ -212,6 +231,7 @@ void DrmAtomicCommit::merge(DrmAtomicCommit *onTop)
     } else if (onTop->m_targetPageflipTime) {
         *m_targetPageflipTime = std::min(*m_targetPageflipTime, *onTop->m_targetPageflipTime);
     }
+    m_tearing &= onTop->m_tearing;
 }
 
 void DrmAtomicCommit::setCursorOnly(bool cursor)
@@ -235,6 +255,11 @@ bool DrmAtomicCommit::isReadyFor(std::chrono::steady_clock::time_point pageflipT
     return (!m_targetPageflipTime || pageflipTarget + s_pageflipSlop >= *m_targetPageflipTime) && areBuffersReadable();
 }
 
+bool DrmAtomicCommit::tearing() const
+{
+    return m_tearing;
+}
+
 DrmLegacyCommit::DrmLegacyCommit(DrmPipeline *pipeline, const std::shared_ptr<DrmFramebuffer> &buffer, const std::shared_ptr<OutputFrame> &frame)
     : DrmCommit(pipeline->gpu())
     , m_pipeline(pipeline)
diff --git a/src/backends/drm/drm_commit.h b/src/backends/drm/drm_commit.h
index 8469f5f789..0617b2f43a 100644
--- a/src/backends/drm/drm_commit.h
+++ b/src/backends/drm/drm_commit.h
@@ -63,11 +63,12 @@ public:
     void addBlob(const DrmProperty &prop, const std::shared_ptr<DrmBlob> &blob);
     void addBuffer(DrmPlane *plane, const std::shared_ptr<DrmFramebuffer> &buffer, const std::shared_ptr<OutputFrame> &frame);
     void setVrr(DrmCrtc *crtc, bool vrr);
+    void setTearing(bool enable);
     void setPresentationMode(PresentationMode mode);
 
-    bool test();
+    bool test(DrmAtomicCommit *currentState = nullptr);
     bool testAllowModeset();
-    bool commit();
+    bool commit(DrmAtomicCommit *currentState = nullptr);
     bool commitModeset();
 
     void pageFlipped(std::chrono::nanoseconds timestamp) override;
@@ -85,8 +86,10 @@ public:
     std::optional<std::chrono::steady_clock::time_point> targetPageflipTime() const;
     bool isReadyFor(std::chrono::steady_clock::time_point pageflipTarget) const;
 
+    bool tearing() const;
+
 private:
-    bool doCommit(uint32_t flags);
+    bool doCommit(uint32_t flags, DrmAtomicCommit *currentState = nullptr);
 
     const QList<DrmPipeline *> m_pipelines;
     std::optional<std::chrono::steady_clock::time_point> m_targetPageflipTime;
@@ -95,6 +98,7 @@ private:
     std::unordered_map<DrmPlane *, std::shared_ptr<OutputFrame>> m_frames;
     std::unordered_set<DrmPlane *> m_planes;
     std::optional<bool> m_vrr;
+    bool m_tearing = false;
     std::unordered_map<uint32_t /* object */, std::unordered_map<uint32_t /* property */, uint64_t /* value */>> m_properties;
     bool m_cursorOnly = false;
     bool m_modeset = false;
diff --git a/src/backends/drm/drm_commit_thread.cpp b/src/backends/drm/drm_commit_thread.cpp
index b765dd7284..01c10f587f 100644
--- a/src/backends/drm/drm_commit_thread.cpp
+++ b/src/backends/drm/drm_commit_thread.cpp
@@ -105,7 +105,7 @@ void DrmCommitThread::submit()
 {
     auto &commit = m_commits.front();
     const auto vrr = commit->isVrr();
-    const bool success = commit->commit();
+    const bool success = commit->commit(m_currentState.get());
     if (success) {
         m_vrr = vrr.value_or(m_vrr);
         m_committed = std::move(commit);
@@ -265,9 +265,12 @@ DrmCommitThread::~DrmCommitThread()
 void DrmCommitThread::addCommit(std::unique_ptr<DrmAtomicCommit> &&commit)
 {
     std::unique_lock lock(m_mutex);
+    const bool tearing = commit->tearing();
     m_commits.push_back(std::move(commit));
     const auto now = std::chrono::steady_clock::now();
-    if (m_vrr && now >= m_lastPageflip + m_minVblankInterval) {
+    if (tearing) {
+        m_targetPageflipTime = now;
+    } else if (m_vrr && now >= m_lastPageflip + m_minVblankInterval) {
         m_targetPageflipTime = now;
     } else {
         m_targetPageflipTime = estimateNextVblank(now);
@@ -300,7 +303,13 @@ void DrmCommitThread::pageFlipped(std::chrono::nanoseconds timestamp)
 {
     std::unique_lock lock(m_mutex);
     m_lastPageflip = TimePoint(timestamp);
-    m_committed.reset();
+    if (auto atomic = dynamic_cast<DrmAtomicCommit *>(m_committed.get())) {
+        mergeStateCommit(std::unique_ptr<DrmAtomicCommit>(atomic));
+        m_committed.release();
+    } else {
+        m_committed.reset();
+        m_currentState.reset();
+    }
     if (!m_commits.empty()) {
         m_targetPageflipTime = estimateNextVblank(std::chrono::steady_clock::now());
         m_commitPending.notify_all();
@@ -313,6 +322,12 @@ bool DrmCommitThread::pageflipsPending()
     return !m_commits.empty() || m_committed;
 }
 
+bool DrmCommitThread::hasCommitsQueued()
+{
+    std::unique_lock lock(m_mutex);
+    return !m_commits.empty();
+}
+
 TimePoint DrmCommitThread::estimateNextVblank(TimePoint now) const
 {
     // the pageflip timestamp may be in the future
@@ -324,4 +339,18 @@ std::chrono::nanoseconds DrmCommitThread::safetyMargin() const
 {
     return m_safetyMargin;
 }
+
+void DrmCommitThread::mergeStateCommit(std::unique_ptr<DrmAtomicCommit> &&commit)
+{
+    if (m_currentState) {
+        m_currentState->merge(commit.get());
+    } else {
+        m_currentState = std::move(commit);
+    }
+}
+
+DrmAtomicCommit *DrmCommitThread::currentStateCommit() const
+{
+    return m_currentState.get();
+}
 }
diff --git a/src/backends/drm/drm_commit_thread.h b/src/backends/drm/drm_commit_thread.h
index 159628f068..e960633e99 100644
--- a/src/backends/drm/drm_commit_thread.h
+++ b/src/backends/drm/drm_commit_thread.h
@@ -37,12 +37,16 @@ public:
     void setModeInfo(uint32_t maximum, std::chrono::nanoseconds vblankTime);
     void pageFlipped(std::chrono::nanoseconds timestamp);
     bool pageflipsPending();
+    bool hasCommitsQueued();
     /**
      * @return how long before the desired presentation timestamp the commit has to be added
      *         in order to get presented at that timestamp
      */
     std::chrono::nanoseconds safetyMargin() const;
 
+    void mergeStateCommit(std::unique_ptr<DrmAtomicCommit> &&commit);
+    DrmAtomicCommit *currentStateCommit() const;
+
 private:
     void clearDroppedCommits();
     TimePoint estimateNextVblank(TimePoint now) const;
@@ -50,6 +54,7 @@ private:
     void submit();
 
     std::unique_ptr<DrmCommit> m_committed;
+    std::unique_ptr<DrmAtomicCommit> m_currentState;
     std::vector<std::unique_ptr<DrmAtomicCommit>> m_commits;
     std::unique_ptr<QThread> m_thread;
     std::mutex m_mutex;
diff --git a/src/backends/drm/drm_gpu.cpp b/src/backends/drm/drm_gpu.cpp
index 39b14856ce..5e782d9706 100644
--- a/src/backends/drm/drm_gpu.cpp
+++ b/src/backends/drm/drm_gpu.cpp
@@ -41,6 +41,9 @@
 #ifndef DRM_CLIENT_CAP_CURSOR_PLANE_HOTSPOT
 #define DRM_CLIENT_CAP_CURSOR_PLANE_HOTSPOT 6
 #endif
+#ifndef DRM_CAP_ATOMIC_ASYNC_PAGE_FLIP
+#define DRM_CAP_ATOMIC_ASYNC_PAGE_FLIP 0x15
+#endif
 
 namespace KWin
 {
@@ -90,8 +93,9 @@ DrmGpu::DrmGpu(DrmBackend *backend, int fd, std::unique_ptr<DrmDevice> &&device)
     initDrmResources();
 
     if (m_atomicModeSetting == false) {
-        // only supported with legacy
         m_asyncPageflipSupported = drmGetCap(fd, DRM_CAP_ASYNC_PAGE_FLIP, &capability) == 0 && capability == 1;
+    } else {
+        m_asyncPageflipSupported = drmGetCap(fd, DRM_CAP_ATOMIC_ASYNC_PAGE_FLIP, &capability) == 0 && capability == 1;
     }
 }
 
diff --git a/src/backends/drm/drm_output.cpp b/src/backends/drm/drm_output.cpp
index 68d43d7ae4..1854a7a08b 100644
--- a/src/backends/drm/drm_output.cpp
+++ b/src/backends/drm/drm_output.cpp
@@ -155,6 +155,12 @@ DrmLease *DrmOutput::lease() const
 
 bool DrmOutput::updateCursorLayer()
 {
+    const bool tearingDesired = m_desiredPresentationMode == PresentationMode::Async || m_desiredPresentationMode == PresentationMode::AdaptiveAsync;
+    if (m_pipeline->gpu()->atomicModeSetting() && tearingDesired && m_pipeline->cursorLayer() && m_pipeline->cursorLayer()->isEnabled()) {
+        // The kernel rejects async commits that have anything but the primary plane FB_ID property in it.
+        // This disables the hardware cursor entirely, so it doesn't interfere with that
+        return false;
+    }
     return m_pipeline->updateCursor();
 }
 
@@ -281,6 +287,7 @@ void DrmOutput::updateDpmsMode(DpmsMode dpmsMode)
 
 bool DrmOutput::present(const std::shared_ptr<OutputFrame> &frame)
 {
+    m_desiredPresentationMode = frame->presentationMode();
     const bool needsModeset = gpu()->needsModeset();
     bool success;
     if (needsModeset) {
@@ -290,6 +297,9 @@ bool DrmOutput::present(const std::shared_ptr<OutputFrame> &frame)
     } else {
         m_pipeline->setPresentationMode(frame->presentationMode());
         DrmPipeline::Error err = m_pipeline->present(frame);
+        if (err == DrmPipeline::Error::FramePending) {
+            return false;
+        }
         if (err != DrmPipeline::Error::None && frame->presentationMode() != PresentationMode::VSync) {
             // retry with a more basic presentation mode
             m_pipeline->setPresentationMode(PresentationMode::VSync);
@@ -303,11 +313,8 @@ bool DrmOutput::present(const std::shared_ptr<OutputFrame> &frame)
     m_renderLoop->setPresentationMode(m_pipeline->presentationMode());
     if (success) {
         Q_EMIT outputChange(frame->damage());
-        return true;
-    } else if (!needsModeset) {
-        qCWarning(KWIN_DRM) << "Presentation failed!" << strerror(errno);
     }
-    return false;
+    return success;
 }
 
 DrmConnector *DrmOutput::connector() const
diff --git a/src/backends/drm/drm_output.h b/src/backends/drm/drm_output.h
index 8d424147cf..acc2a7a8f2 100644
--- a/src/backends/drm/drm_output.h
+++ b/src/backends/drm/drm_output.h
@@ -78,6 +78,8 @@ private:
 
     QVector3D m_channelFactors = {1, 1, 1};
     bool m_channelFactorsNeedShaderFallback = false;
+
+    PresentationMode m_desiredPresentationMode = PresentationMode::VSync;
 };
 
 }
diff --git a/src/backends/drm/drm_pipeline.cpp b/src/backends/drm/drm_pipeline.cpp
index 957d115a52..4e4cf64785 100644
--- a/src/backends/drm/drm_pipeline.cpp
+++ b/src/backends/drm/drm_pipeline.cpp
@@ -77,10 +77,21 @@ DrmPipeline::Error DrmPipeline::present(const std::shared_ptr<OutputFrame> &fram
 {
     Q_ASSERT(m_pending.crtc);
     if (gpu()->atomicModeSetting()) {
+        if (m_pending.presentationMode == PresentationMode::Async || m_pending.presentationMode == PresentationMode::AdaptiveAsync) {
+            if (m_commitThread->hasCommitsQueued()) {
+                // with tearing, we can only queue one commit at a time or the atomic test result won't be accurate
+                // because the pending commits will change the atomic state and async pageflips aren't really atomic...
+                return Error::FramePending;
+            }
+        }
         // test the full state, to take pending commits into account
-        if (auto err = DrmPipeline::commitPipelinesAtomic({this}, CommitMode::Test, frame, {}); err != Error::None) {
+        auto commit = std::make_unique<DrmAtomicCommit>(QVector<DrmPipeline *>{this});
+        if (Error err = prepareAtomicCommit(commit.get(), CommitMode::Test, frame); err != Error::None) {
             return err;
         }
+        if (!commit->test(m_commitThread->currentStateCommit())) {
+            return Error::InvalidArguments;
+        }
         // only give the actual state update to the commit thread, so that it can potentially reorder the commits
         auto primaryPlaneUpdate = std::make_unique<DrmAtomicCommit>(QList<DrmPipeline *>{this});
         if (Error err = prepareAtomicPresentation(primaryPlaneUpdate.get(), frame); err != Error::None) {
@@ -166,6 +177,9 @@ DrmPipeline::Error DrmPipeline::commitPipelinesAtomic(const QList<DrmPipeline *>
         }
         for (const auto pipeline : pipelines) {
             pipeline->m_next.needsModeset = pipeline->m_pending.needsModeset = false;
+            auto throwaway = std::make_unique<DrmAtomicCommit>(QList<DrmPipeline *>{pipeline});
+            pipeline->prepareAtomicCommit(throwaway.get(), CommitMode::CommitModeset, frame);
+            pipeline->m_commitThread->mergeStateCommit(std::move(throwaway));
         }
         commit->pageFlipped(std::chrono::steady_clock::now().time_since_epoch());
         return Error::None;
@@ -205,6 +219,7 @@ DrmPipeline::Error DrmPipeline::prepareAtomicCommit(DrmAtomicCommit *commit, Com
 DrmPipeline::Error DrmPipeline::prepareAtomicPresentation(DrmAtomicCommit *commit, const std::shared_ptr<OutputFrame> &frame)
 {
     commit->setPresentationMode(m_pending.presentationMode);
+    commit->setTearing(m_pending.presentationMode == PresentationMode::Async || m_pending.presentationMode == PresentationMode::AdaptiveAsync);
     if (m_connector->contentType.isValid()) {
         commit->addEnum(m_connector->contentType, m_pending.contentType);
     }
-- 
2.45.2

