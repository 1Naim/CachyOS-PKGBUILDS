From 594555be8d6b485b26cec2ee3c9f17208db12eeb Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Fri, 12 Jul 2024 11:11:34 +0200
Subject: [PATCH 1/4] Allow passing extra environment variables to Xwayland

---
 src/main_wayland.cpp              | 1 +
 src/main_wayland.h                | 5 +++++
 src/xwayland/xwaylandlauncher.cpp | 8 ++++++++
 src/xwayland/xwaylandlauncher.h   | 4 ++++
 4 files changed, 18 insertions(+)

diff --git a/src/main_wayland.cpp b/src/main_wayland.cpp
index 02e6bbee282..6e0f3f52307 100644
--- a/src/main_wayland.cpp
+++ b/src/main_wayland.cpp
@@ -169,6 +169,7 @@ void ApplicationWayland::continueStartupWithScene()
         m_xwayland->xwaylandLauncher()->setListenFDs(m_xwaylandListenFds);
         m_xwayland->xwaylandLauncher()->setDisplayName(m_xwaylandDisplay);
         m_xwayland->xwaylandLauncher()->setXauthority(m_xwaylandXauthority);
+        m_xwayland->xwaylandLauncher()->setExtraEnvironmentVariables(m_xwaylandExtraEnvironment);
         m_xwayland->init();
         connect(m_xwayland.get(), &Xwl::Xwayland::started, this, &ApplicationWayland::applyXwaylandScale);
     }
diff --git a/src/main_wayland.h b/src/main_wayland.h
index deb9ec70573..23752d51848 100644
--- a/src/main_wayland.h
+++ b/src/main_wayland.h
@@ -42,6 +42,10 @@ public:
     {
         m_xwaylandXauthority = xauthority;
     }
+    void addExtraXWaylandEnvrionmentVariable(const QString &variable, const QString &value)
+    {
+        m_xwaylandExtraEnvironment.insert(variable, value);
+    }
     XwaylandInterface *xwayland() const override;
 #endif
     void setApplicationsToStart(const QStringList &applications)
@@ -75,6 +79,7 @@ private:
     QList<int> m_xwaylandListenFds;
     QString m_xwaylandDisplay;
     QString m_xwaylandXauthority;
+    QMap<QString, QString> m_xwaylandExtraEnvironment;
 #endif
     KConfigWatcher::Ptr m_settingsWatcher;
 };
diff --git a/src/xwayland/xwaylandlauncher.cpp b/src/xwayland/xwaylandlauncher.cpp
index e24cd5fe4e0..3df3663c0b4 100644
--- a/src/xwayland/xwaylandlauncher.cpp
+++ b/src/xwayland/xwaylandlauncher.cpp
@@ -69,6 +69,11 @@ void XwaylandLauncher::setXauthority(const QString &xauthority)
     m_xAuthority = xauthority;
 }
 
+void XwaylandLauncher::setExtraEnvironmentVariables(const QMap<QString, QString> &extraEnvironment)
+{
+    m_extraEnvironment = extraEnvironment;
+}
+
 void XwaylandLauncher::enable()
 {
     if (m_enabled) {
@@ -198,6 +203,9 @@ bool XwaylandLauncher::start()
     if (qEnvironmentVariableIntValue("KWIN_XWAYLAND_DEBUG") == 1) {
         env.insert("WAYLAND_DEBUG", QByteArrayLiteral("1"));
     }
+    for (const auto &[variable, value] : m_extraEnvironment.asKeyValueRange()) {
+        env.insert(variable, value);
+    }
     m_xwaylandProcess->setProcessEnvironment(env);
     m_xwaylandProcess->setArguments(arguments);
     connect(m_xwaylandProcess, &QProcess::errorOccurred, this, &XwaylandLauncher::handleXwaylandError);
diff --git a/src/xwayland/xwaylandlauncher.h b/src/xwayland/xwaylandlauncher.h
index 3c58e816963..4382165b691 100644
--- a/src/xwayland/xwaylandlauncher.h
+++ b/src/xwayland/xwaylandlauncher.h
@@ -11,6 +11,7 @@
 #pragma once
 
 #include <QList>
+#include <QMap>
 #include <QObject>
 #include <QProcess>
 #include <QSocketNotifier>
@@ -56,6 +57,8 @@ public:
      */
     void setXauthority(const QString &xauthority);
 
+    void setExtraEnvironmentVariables(const QMap<QString, QString> &extraEnvironment);
+
     void enable();
     void disable();
     bool start();
@@ -102,6 +105,7 @@ private:
     QList<int> m_listenFds;
     QString m_displayName;
     QString m_xAuthority;
+    QMap<QString, QString> m_extraEnvironment;
 
     bool m_enabled = false;
     int m_crashCount = 0;
-- 
GitLab


From b38811c3ebfa3aec7b202d669560c473834b44b7 Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Tue, 30 Jul 2024 14:35:30 +0200
Subject: [PATCH 2/4] Allow specifying file descriptors that are passed to
 Xwayland

---
 src/main_wayland.cpp              |  1 +
 src/main_wayland.h                |  9 +++++++++
 src/xwayland/xwaylandlauncher.cpp | 14 ++++++++++++++
 src/xwayland/xwaylandlauncher.h   |  5 +++++
 4 files changed, 29 insertions(+)

diff --git a/src/main_wayland.cpp b/src/main_wayland.cpp
index 6e0f3f52307..10bf8a62b44 100644
--- a/src/main_wayland.cpp
+++ b/src/main_wayland.cpp
@@ -170,6 +170,7 @@ void ApplicationWayland::continueStartupWithScene()
         m_xwayland->xwaylandLauncher()->setDisplayName(m_xwaylandDisplay);
         m_xwayland->xwaylandLauncher()->setXauthority(m_xwaylandXauthority);
         m_xwayland->xwaylandLauncher()->setExtraEnvironmentVariables(m_xwaylandExtraEnvironment);
+        m_xwayland->xwaylandLauncher()->setFDsToPassToXwayland(std::move(m_xwaylandFds));
         m_xwayland->init();
         connect(m_xwayland.get(), &Xwl::Xwayland::started, this, &ApplicationWayland::applyXwaylandScale);
     }
diff --git a/src/main_wayland.h b/src/main_wayland.h
index 23752d51848..5bcd64e9af2 100644
--- a/src/main_wayland.h
+++ b/src/main_wayland.h
@@ -11,6 +11,10 @@
 #include <KConfigWatcher>
 #include <QTimer>
 
+#include "utils/filedescriptor.h"
+
+#include <vector>
+
 namespace KWin
 {
 namespace Xwl
@@ -46,6 +50,10 @@ public:
     {
         m_xwaylandExtraEnvironment.insert(variable, value);
     }
+    void passFdToXwayland(FileDescriptor &&fd)
+    {
+        m_xwaylandFds.push_back(std::move(fd));
+    }
     XwaylandInterface *xwayland() const override;
 #endif
     void setApplicationsToStart(const QStringList &applications)
@@ -80,6 +88,7 @@ private:
     QString m_xwaylandDisplay;
     QString m_xwaylandXauthority;
     QMap<QString, QString> m_xwaylandExtraEnvironment;
+    std::vector<FileDescriptor> m_xwaylandFds;
 #endif
     KConfigWatcher::Ptr m_settingsWatcher;
 };
diff --git a/src/xwayland/xwaylandlauncher.cpp b/src/xwayland/xwaylandlauncher.cpp
index 3df3663c0b4..d795ee7d1c5 100644
--- a/src/xwayland/xwaylandlauncher.cpp
+++ b/src/xwayland/xwaylandlauncher.cpp
@@ -34,6 +34,8 @@
 // system
 #include <cerrno>
 #include <cstring>
+#include <fcntl.h>
+#include <ranges>
 #include <sys/socket.h>
 #include <unistd.h>
 
@@ -74,6 +76,11 @@ void XwaylandLauncher::setExtraEnvironmentVariables(const QMap<QString, QString>
     m_extraEnvironment = extraEnvironment;
 }
 
+void XwaylandLauncher::setFDsToPassToXwayland(std::vector<FileDescriptor> &&fds)
+{
+    m_fdsToPreserve = std::move(fds);
+}
+
 void XwaylandLauncher::enable()
 {
     if (m_enabled) {
@@ -208,6 +215,13 @@ bool XwaylandLauncher::start()
     }
     m_xwaylandProcess->setProcessEnvironment(env);
     m_xwaylandProcess->setArguments(arguments);
+    m_xwaylandProcess->setChildProcessModifier([this] {
+        for (const auto &fd : m_fdsToPreserve) {
+            int flags = fcntl(fd.get(), F_GETFD);
+            fcntl(fd.get(), F_SETFD, flags & ~FD_CLOEXEC);
+        }
+    });
+
     connect(m_xwaylandProcess, &QProcess::errorOccurred, this, &XwaylandLauncher::handleXwaylandError);
     connect(m_xwaylandProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
             this, &XwaylandLauncher::handleXwaylandFinished);
diff --git a/src/xwayland/xwaylandlauncher.h b/src/xwayland/xwaylandlauncher.h
index 4382165b691..d83710a6a1d 100644
--- a/src/xwayland/xwaylandlauncher.h
+++ b/src/xwayland/xwaylandlauncher.h
@@ -10,6 +10,8 @@
 
 #pragma once
 
+#include "utils/filedescriptor.h"
+
 #include <QList>
 #include <QMap>
 #include <QObject>
@@ -59,6 +61,8 @@ public:
 
     void setExtraEnvironmentVariables(const QMap<QString, QString> &extraEnvironment);
 
+    void setFDsToPassToXwayland(std::vector<FileDescriptor> &&fds);
+
     void enable();
     void disable();
     bool start();
@@ -106,6 +110,7 @@ private:
     QString m_displayName;
     QString m_xAuthority;
     QMap<QString, QString> m_extraEnvironment;
+    std::vector<FileDescriptor> m_fdsToPreserve;
 
     bool m_enabled = false;
     int m_crashCount = 0;
-- 
GitLab


From 28c2087baa79ff87fbaf270f00b0efecf0c69c0b Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Fri, 12 Jul 2024 14:58:34 +0200
Subject: [PATCH 3/4] Enable Xwayland xtest input emulation without going
 through the portal

Due to the limited libei(s) API a trick is used. Let it create
a socket with an absolute path, open that path again to get a fd
referring to the socket, unlink the file and specify the socket
that Xwayland should use in the form of /proc/self/fd/$fd.
---
 src/plugins/eis/eisbackend.cpp    | 20 ++++++++++++++++----
 src/plugins/eis/eisbackend.h      |  6 ++++--
 src/plugins/eis/eiscontext.cpp    | 31 ++++++++++++++++++++++---------
 src/plugins/eis/eiscontext.h      | 26 +++++++++++++++++++++-----
 src/xwayland/xwaylandlauncher.cpp |  3 ---
 5 files changed, 63 insertions(+), 23 deletions(-)

diff --git a/src/plugins/eis/eisbackend.cpp b/src/plugins/eis/eisbackend.cpp
index 43eca32d4b9..1d00394b016 100644
--- a/src/plugins/eis/eisbackend.cpp
+++ b/src/plugins/eis/eisbackend.cpp
@@ -14,7 +14,7 @@
 #include "input.h"
 #include "keyboard_input.h"
 #include "keyboard_layout.h"
-#include "main.h"
+#include "main_wayland.h"
 #include "workspace.h"
 #include "xkb.h"
 
@@ -26,6 +26,8 @@
 
 #include <libeis.h>
 
+#include <fcntl.h>
+
 #include <ranges>
 
 namespace KWin
@@ -34,11 +36,21 @@ namespace KWin
 EisBackend::EisBackend(QObject *parent)
     : KWin::InputBackend(parent)
     , m_serviceWatcher(new QDBusServiceWatcher(this))
+
 {
+#if HAVE_XWAYLAND_ENABLE_EI_PORTAL
+    m_xWaylandContext = std::make_unique<XWaylandEisContext>(this);
+    FileDescriptor fd(open(m_xWaylandContext->socketName.constData(), O_PATH | O_CLOEXEC));
+    unlink(m_xWaylandContext->socketName.constData());
+    auto appWayland = static_cast<ApplicationWayland *>(kwinApp());
+    appWayland->addExtraXWaylandEnvrionmentVariable(QStringLiteral("LIBEI_SOCKET"), QStringLiteral("/proc/self/fd/%1").arg(fd.get()));
+    appWayland->passFdToXwayland(std::move(fd));
+#endif
+
     m_serviceWatcher->setConnection(QDBusConnection::sessionBus());
     m_serviceWatcher->setWatchMode(QDBusServiceWatcher::WatchForUnregistration);
     connect(m_serviceWatcher, &QDBusServiceWatcher::serviceUnregistered, this, [this](const QString &service) {
-        std::erase_if(m_contexts, [&service](const std::unique_ptr<EisContext> &context) {
+        std::erase_if(m_contexts, [&service](const std::unique_ptr<DbusEisContext> &context) {
             return context->dbusService == service;
         });
         m_serviceWatcher->removeWatchedService(service);
@@ -92,14 +104,14 @@ QDBusUnixFileDescriptor EisBackend::connectToEIS(const int &capabilities, int &c
     const QString dbusService = message().service();
     static int s_cookie = 0;
     cookie = ++s_cookie;
-    m_contexts.push_back(std::make_unique<EisContext>(this, eisCapabilities, cookie, dbusService));
+    m_contexts.push_back(std::make_unique<DbusEisContext>(this, eisCapabilities, cookie, dbusService));
     m_serviceWatcher->addWatchedService(dbusService);
     return QDBusUnixFileDescriptor(m_contexts.back()->addClient());
 }
 
 void EisBackend::disconnect(int cookie)
 {
-    auto it = std::ranges::find(m_contexts, cookie, [](const std::unique_ptr<EisContext> &context) {
+    auto it = std::ranges::find(m_contexts, cookie, [](const std::unique_ptr<DbusEisContext> &context) {
         return context->cookie;
     });
     if (it != std::ranges::end(m_contexts)) {
diff --git a/src/plugins/eis/eisbackend.h b/src/plugins/eis/eisbackend.h
index a34d40369be..f04282e58cf 100644
--- a/src/plugins/eis/eisbackend.h
+++ b/src/plugins/eis/eisbackend.h
@@ -24,7 +24,8 @@ class QDBusServiceWatcher;
 
 namespace KWin
 {
-class EisContext;
+class DbusEisContext;
+class XWaylandEisContext;
 
 class EisBackend : public KWin::InputBackend, public QDBusContext
 {
@@ -46,7 +47,8 @@ public:
 private:
     QDBusServiceWatcher *m_serviceWatcher;
     RamFile m_keymapFile;
-    std::vector<std::unique_ptr<EisContext>> m_contexts;
+    std::unique_ptr<XWaylandEisContext> m_xWaylandContext;
+    std::vector<std::unique_ptr<DbusEisContext>> m_contexts;
 };
 
 }
diff --git a/src/plugins/eis/eiscontext.cpp b/src/plugins/eis/eiscontext.cpp
index 577fe8b0508..164cd11d3b7 100644
--- a/src/plugins/eis/eiscontext.cpp
+++ b/src/plugins/eis/eiscontext.cpp
@@ -52,15 +52,33 @@ public:
     std::unique_ptr<EisDevice> keyboard;
 };
 
-EisContext::EisContext(KWin::EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities, int cookie, const QString &dbusService)
-    : cookie(cookie)
+DbusEisContext::DbusEisContext(KWin::EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities, int cookie, const QString &dbusService)
+    : EisContext(backend, allowedCapabilities)
+    , cookie(cookie)
     , dbusService(dbusService)
+{
+    eis_setup_backend_fd(m_eisContext);
+}
+
+int DbusEisContext::addClient()
+{
+    return eis_backend_fd_add_client(m_eisContext);
+}
+
+XWaylandEisContext::XWaylandEisContext(KWin::EisBackend *backend)
+    : EisContext(backend, {EIS_DEVICE_CAP_POINTER | EIS_DEVICE_CAP_POINTER_ABSOLUTE | EIS_DEVICE_CAP_KEYBOARD | EIS_DEVICE_CAP_TOUCH | EIS_DEVICE_CAP_SCROLL | EIS_DEVICE_CAP_BUTTON})
+    , socketName(qgetenv("XDG_RUNTIME_DIR") + QByteArrayLiteral("/kwin-xwayland-eis-socket.") + QByteArray::number(getpid()))
+{
+    eis_setup_backend_socket(m_eisContext, socketName.constData());
+}
+
+EisContext::EisContext(KWin::EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities)
+    : m_eisContext(eis_new(this))
     , m_backend(backend)
-    , m_eisContext(eis_new(this))
     , m_allowedCapabilities(allowedCapabilities)
     , m_socketNotifier(eis_get_fd(m_eisContext), QSocketNotifier::Read)
+
 {
-    eis_setup_backend_fd(m_eisContext);
     eis_log_set_priority(m_eisContext, EIS_LOG_PRIORITY_DEBUG);
     eis_log_set_handler(m_eisContext, eis_log_handler);
     QObject::connect(&m_socketNotifier, &QSocketNotifier::activated, [this] {
@@ -101,11 +119,6 @@ void EisContext::updateKeymap()
     }
 }
 
-int EisContext::addClient()
-{
-    return eis_backend_fd_add_client(m_eisContext);
-}
-
 static std::chrono::microseconds currentTime()
 {
     return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch());
diff --git a/src/plugins/eis/eiscontext.h b/src/plugins/eis/eiscontext.h
index fd8f676a4f3..50de947a856 100644
--- a/src/plugins/eis/eiscontext.h
+++ b/src/plugins/eis/eiscontext.h
@@ -24,24 +24,40 @@ struct EisClient;
 class EisContext
 {
 public:
-    EisContext(EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities, int cookie, const QString &dbusService);
+    EisContext(EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities);
     ~EisContext();
 
-    int addClient();
     void updateScreens();
     void updateKeymap();
 
-    const int cookie;
-    const QString dbusService;
+protected:
+    eis *m_eisContext;
 
 private:
     void handleEvents();
 
     EisBackend *m_backend;
-    eis *m_eisContext;
     QFlags<eis_device_capability> m_allowedCapabilities;
     QSocketNotifier m_socketNotifier;
     std::vector<std::unique_ptr<EisClient>> m_clients;
 };
 
+class DbusEisContext : public EisContext
+{
+public:
+    DbusEisContext(EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities, int cookie, const QString &dbusService);
+
+    int addClient();
+
+    const int cookie;
+    const QString dbusService;
+};
+
+class XWaylandEisContext : public EisContext
+{
+public:
+    XWaylandEisContext(EisBackend *backend);
+
+    const QByteArray socketName;
+};
 }
diff --git a/src/xwayland/xwaylandlauncher.cpp b/src/xwayland/xwaylandlauncher.cpp
index d795ee7d1c5..bd47d3c7deb 100644
--- a/src/xwayland/xwaylandlauncher.cpp
+++ b/src/xwayland/xwaylandlauncher.cpp
@@ -198,9 +198,6 @@ bool XwaylandLauncher::start()
     arguments << QStringLiteral("-displayfd") << QString::number(pipeFds[1]);
     arguments << QStringLiteral("-rootless");
     arguments << QStringLiteral("-wm") << QString::number(fd);
-#if HAVE_XWAYLAND_ENABLE_EI_PORTAL
-    arguments << QStringLiteral("-enable-ei-portal");
-#endif
 
     m_xwaylandProcess = new QProcess(this);
     m_xwaylandProcess->setProcessChannelMode(QProcess::ForwardedErrorChannel);
-- 
GitLab


From 8868e52cfa8dccd3dc685de88a81cbfc1ffefcd9 Mon Sep 17 00:00:00 2001
From: David Redondo <kde@david-redondo.de>
Date: Fri, 12 Jul 2024 15:55:59 +0200
Subject: [PATCH 4/4] Add option to control whether xwayland xtest will prompt
 or not

Users may want to enable this for example if they often use things
which rely on xtest.
Instead of the portal showing a dialog, KWin will show a dialog
when it should ask.
This approach allows us even to show more information to the user
as we can get the client binary name from the eis client compared
to the portal which receives nothing.
---
 src/kcms/xwayland/kwinxwaylandsettings.kcfg |  3 ++
 src/kcms/xwayland/ui/main.qml               | 14 ++++++++
 src/kwin.kcfg                               |  3 ++
 src/options.cpp                             | 11 ++++++
 src/options.h                               | 11 ++++++
 src/plugins/eis/CMakeLists.txt              |  3 +-
 src/plugins/eis/eisbackend.cpp              |  3 +-
 src/plugins/eis/eiscontext.cpp              | 40 +++++++++++----------
 src/plugins/eis/eiscontext.h                | 13 +++----
 src/plugins/eis/xwaylandeiscontext.cpp      | 40 +++++++++++++++++++++
 src/plugins/eis/xwaylandeiscontext.h        | 18 ++++++++++
 11 files changed, 131 insertions(+), 28 deletions(-)
 create mode 100644 src/plugins/eis/xwaylandeiscontext.cpp
 create mode 100644 src/plugins/eis/xwaylandeiscontext.h

diff --git a/src/kcms/xwayland/kwinxwaylandsettings.kcfg b/src/kcms/xwayland/kwinxwaylandsettings.kcfg
index 8c030dd06af..41da3864871 100644
--- a/src/kcms/xwayland/kwinxwaylandsettings.kcfg
+++ b/src/kcms/xwayland/kwinxwaylandsettings.kcfg
@@ -17,5 +17,8 @@
         <entry name="XwaylandEavesdropsMouse" type="Bool">
             <default>false</default>
         </entry>
+        <entry name="XwaylandEisNoPrompt" type="Bool">
+            <default>false</default>
+        </entry>
     </group>
 </kcfg>
diff --git a/src/kcms/xwayland/ui/main.qml b/src/kcms/xwayland/ui/main.qml
index 9baf33f869c..f7e15d50aa6 100644
--- a/src/kcms/xwayland/ui/main.qml
+++ b/src/kcms/xwayland/ui/main.qml
@@ -40,6 +40,7 @@ KCM.SimpleKCM {
         }
 
         Kirigami.FormLayout {
+            id: eavesdropLayout
             Layout.leftMargin: Kirigami.Units.gridUnit
             Layout.rightMargin: Kirigami.Units.gridUnit
 
@@ -89,5 +90,18 @@ KCM.SimpleKCM {
             text: i18n("Note that using this setting will reduce system security to that of the X11 session by permitting malicious software to steal passwords and spy on the text that you type. Make sure you understand and accept this risk.")
             visible: always.checked
         }
+
+        Kirigami.Separator {
+            Layout.fillWidth: true
+            Layout.leftMargin: Kirigami.Units.gridUnit
+            Layout.rightMargin: Kirigami.Units.gridUnit
+        }
+
+        QQC2.CheckBox {
+            Layout.margins: Kirigami.Units.gridUnit
+            text: i18nc("@option:check", "Allow controlling the pointer and keyboard without asking for permission")
+            checked: kcm.settings.xwaylandEisNoPrompt
+            onToggled: kcm.settings.xwaylandEisNoPrompt = checked
+        }
     }
 }
diff --git a/src/kwin.kcfg b/src/kwin.kcfg
index 86636127ed2..9a6b5b2a179 100644
--- a/src/kwin.kcfg
+++ b/src/kwin.kcfg
@@ -346,5 +346,8 @@
         <entry name="XwaylandEavesdropsMouse" type="Bool">
             <default>false</default>
         </entry>
+        <entry name="XwaylandEisNoPrompt" type="Bool">
+            <default>false</default>
+        </entry>
     </group>
 </kcfg>
diff --git a/src/options.cpp b/src/options.cpp
index 340733b2f64..99f1493c98c 100644
--- a/src/options.cpp
+++ b/src/options.cpp
@@ -56,6 +56,7 @@ Options::Options(QObject *parent)
     , m_xwaylandMaxCrashCount(Options::defaultXwaylandMaxCrashCount())
     , m_xwaylandEavesdrops(Options::defaultXwaylandEavesdrops())
     , m_xwaylandEavesdropsMouse(Options::defaultXwaylandEavesdropsMouse())
+    , m_xwaylandEisNoPrompt(Options::defaultXwaylandEisNoPrompt())
     , m_compositingMode(Options::defaultCompositingMode())
     , m_useCompositing(Options::defaultUseCompositing())
     , m_hiddenPreviews(Options::defaultHiddenPreviews())
@@ -166,6 +167,15 @@ void Options::setXwaylandEavesdropsMouse(bool eavesdropsMouse)
     Q_EMIT xwaylandEavesdropsChanged();
 }
 
+void Options::setXWaylandEiNoPrompt(bool eiSocket)
+{
+    if (m_xwaylandEisNoPrompt == eiSocket) {
+        return;
+    }
+    m_xwaylandEisNoPrompt = eiSocket;
+    Q_EMIT xwaylandEiSocketChanged();
+}
+
 void Options::setClickRaise(bool clickRaise)
 {
     if (m_autoRaise) {
@@ -825,6 +835,7 @@ void Options::syncFromKcfgc()
     setXwaylandMaxCrashCount(m_settings->xwaylandMaxCrashCount());
     setXwaylandEavesdrops(XwaylandEavesdropsMode(m_settings->xwaylandEavesdrops()));
     setXwaylandEavesdropsMouse(m_settings->xwaylandEavesdropsMouse());
+    setXWaylandEiNoPrompt(m_settings->xwaylandEisNoPrompt());
     setPlacement(m_settings->placement());
     setAutoRaise(m_settings->autoRaise());
     setAutoRaiseInterval(m_settings->autoRaiseInterval());
diff --git a/src/options.h b/src/options.h
index 251559f4bba..1f22f5b7524 100644
--- a/src/options.h
+++ b/src/options.h
@@ -269,6 +269,10 @@ public:
     {
         return m_xwaylandEavesdropsMouse;
     }
+    bool xwaylandEisNoPrompt() const
+    {
+        return m_xwaylandEisNoPrompt;
+    }
 
     /**
      * Whether clicking on a window raises it in FocusFollowsMouse
@@ -702,6 +706,7 @@ public:
     void setXwaylandMaxCrashCount(int maxCrashCount);
     void setXwaylandEavesdrops(XwaylandEavesdropsMode mode);
     void setXwaylandEavesdropsMouse(bool eavesdropsMouse);
+    void setXWaylandEiNoPrompt(bool eiSocket);
     void setNextFocusPrefersMouse(bool nextFocusPrefersMouse);
     void setClickRaise(bool clickRaise);
     void setAutoRaise(bool autoRaise);
@@ -884,6 +889,10 @@ public:
     {
         return false;
     }
+    static bool defaultXwaylandEisNoPrompt()
+    {
+        return false;
+    }
     static ActivationDesktopPolicy defaultActivationDesktopPolicy()
     {
         return ActivationDesktopPolicy::SwitchToOtherDesktop;
@@ -903,6 +912,7 @@ Q_SIGNALS:
     void xwaylandMaxCrashCountChanged();
     void xwaylandEavesdropsChanged();
     void xwaylandEavesdropsMouseChanged();
+    void xwaylandEiSocketChanged();
     void nextFocusPrefersMouseChanged();
     void clickRaiseChanged();
     void autoRaiseChanged();
@@ -988,6 +998,7 @@ private:
     int m_xwaylandMaxCrashCount;
     XwaylandEavesdropsMode m_xwaylandEavesdrops;
     bool m_xwaylandEavesdropsMouse;
+    bool m_xwaylandEisNoPrompt;
 
     CompositingType m_compositingMode;
     bool m_useCompositing;
diff --git a/src/plugins/eis/CMakeLists.txt b/src/plugins/eis/CMakeLists.txt
index 7b8f99d0a96..3743a8f3452 100644
--- a/src/plugins/eis/CMakeLists.txt
+++ b/src/plugins/eis/CMakeLists.txt
@@ -26,6 +26,7 @@ target_sources(eis PRIVATE
     eisinputcapture.cpp
     eisinputcapturemanager.cpp
     eisinputcapturefilter.cpp
+    xwaylandeiscontext.cpp
 )
 
-target_link_libraries(eis PRIVATE kwin Libeis::Libeis XKB::XKB)
+target_link_libraries(eis PRIVATE kwin KF6::WidgetsAddons KF6::I18n Libeis::Libeis XKB::XKB)
diff --git a/src/plugins/eis/eisbackend.cpp b/src/plugins/eis/eisbackend.cpp
index 1d00394b016..90de504424c 100644
--- a/src/plugins/eis/eisbackend.cpp
+++ b/src/plugins/eis/eisbackend.cpp
@@ -9,6 +9,7 @@
 #include "eiscontext.h"
 #include "eisdevice.h"
 #include "libeis_logging.h"
+#include "xwaylandeiscontext.h"
 
 #include "core/output.h"
 #include "input.h"
@@ -27,6 +28,7 @@
 #include <libeis.h>
 
 #include <fcntl.h>
+#include <unistd.h>
 
 #include <ranges>
 
@@ -36,7 +38,6 @@ namespace KWin
 EisBackend::EisBackend(QObject *parent)
     : KWin::InputBackend(parent)
     , m_serviceWatcher(new QDBusServiceWatcher(this))
-
 {
 #if HAVE_XWAYLAND_ENABLE_EI_PORTAL
     m_xWaylandContext = std::make_unique<XWaylandEisContext>(this);
diff --git a/src/plugins/eis/eiscontext.cpp b/src/plugins/eis/eiscontext.cpp
index 164cd11d3b7..f6f360c6650 100644
--- a/src/plugins/eis/eiscontext.cpp
+++ b/src/plugins/eis/eiscontext.cpp
@@ -65,11 +65,9 @@ int DbusEisContext::addClient()
     return eis_backend_fd_add_client(m_eisContext);
 }
 
-XWaylandEisContext::XWaylandEisContext(KWin::EisBackend *backend)
-    : EisContext(backend, {EIS_DEVICE_CAP_POINTER | EIS_DEVICE_CAP_POINTER_ABSOLUTE | EIS_DEVICE_CAP_KEYBOARD | EIS_DEVICE_CAP_TOUCH | EIS_DEVICE_CAP_SCROLL | EIS_DEVICE_CAP_BUTTON})
-    , socketName(qgetenv("XDG_RUNTIME_DIR") + QByteArrayLiteral("/kwin-xwayland-eis-socket.") + QByteArray::number(getpid()))
+void DbusEisContext::connectionRequested(eis_client *client)
 {
-    eis_setup_backend_socket(m_eisContext, socketName.constData());
+    connectToClient(client);
 }
 
 EisContext::EisContext(KWin::EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities)
@@ -119,6 +117,25 @@ void EisContext::updateKeymap()
     }
 }
 
+void EisContext::connectToClient(eis_client *client)
+{
+    eis_client_connect(client);
+
+    const char *clientName = eis_client_get_name(client);
+
+    auto seat = eis_client_new_seat(client, QByteArrayLiteral(" seat").prepend(clientName));
+    constexpr std::array allCapabilities{EIS_DEVICE_CAP_POINTER, EIS_DEVICE_CAP_POINTER_ABSOLUTE, EIS_DEVICE_CAP_KEYBOARD, EIS_DEVICE_CAP_TOUCH, EIS_DEVICE_CAP_SCROLL, EIS_DEVICE_CAP_BUTTON};
+    for (auto capability : allCapabilities) {
+        if (m_allowedCapabilities & capability) {
+            eis_seat_configure_capability(seat, capability);
+        }
+    }
+    eis_seat_add(seat);
+
+    m_clients.emplace_back(std::make_unique<EisClient>(client, seat));
+    qCDebug(KWIN_EIS) << "New eis client" << clientName;
+}
+
 static std::chrono::microseconds currentTime()
 {
     return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch());
@@ -140,21 +157,8 @@ void EisContext::handleEvents()
             if (!eis_client_is_sender(client)) {
                 qCDebug(KWIN_EIS) << "disconnecting receiving client" << clientName;
                 eis_client_disconnect(client);
-                break;
-            }
-            eis_client_connect(client);
-
-            auto seat = eis_client_new_seat(client, QByteArrayLiteral(" seat").prepend(clientName));
-            constexpr std::array allCapabilities{EIS_DEVICE_CAP_POINTER, EIS_DEVICE_CAP_POINTER_ABSOLUTE, EIS_DEVICE_CAP_KEYBOARD, EIS_DEVICE_CAP_TOUCH, EIS_DEVICE_CAP_SCROLL, EIS_DEVICE_CAP_BUTTON};
-            for (auto capability : allCapabilities) {
-                if (m_allowedCapabilities & capability) {
-                    eis_seat_configure_capability(seat, capability);
-                }
             }
-
-            eis_seat_add(seat);
-            m_clients.emplace_back(std::make_unique<EisClient>(client, seat));
-            qCDebug(KWIN_EIS) << "New eis client" << clientName;
+            connectionRequested(client);
             break;
         }
         case EIS_EVENT_CLIENT_DISCONNECT: {
diff --git a/src/plugins/eis/eiscontext.h b/src/plugins/eis/eiscontext.h
index 50de947a856..c14b17fb153 100644
--- a/src/plugins/eis/eiscontext.h
+++ b/src/plugins/eis/eiscontext.h
@@ -25,13 +25,15 @@ class EisContext
 {
 public:
     EisContext(EisBackend *backend, QFlags<eis_device_capability> allowedCapabilities);
-    ~EisContext();
+    virtual ~EisContext();
 
     void updateScreens();
     void updateKeymap();
 
 protected:
     eis *m_eisContext;
+    void connectToClient(eis_client *client);
+    virtual void connectionRequested(eis_client *client) = 0;
 
 private:
     void handleEvents();
@@ -51,13 +53,8 @@ public:
 
     const int cookie;
     const QString dbusService;
-};
 
-class XWaylandEisContext : public EisContext
-{
-public:
-    XWaylandEisContext(EisBackend *backend);
-
-    const QByteArray socketName;
+private:
+    void connectionRequested(eis_client *client) override;
 };
 }
diff --git a/src/plugins/eis/xwaylandeiscontext.cpp b/src/plugins/eis/xwaylandeiscontext.cpp
new file mode 100644
index 00000000000..ecd3fb2c65f
--- /dev/null
+++ b/src/plugins/eis/xwaylandeiscontext.cpp
@@ -0,0 +1,40 @@
+#include "xwaylandeiscontext.h"
+
+#include "options.h"
+
+#include <KLocalizedString>
+#include <KMessageDialog>
+#include <KStandardGuiItem>
+
+namespace KWin
+{
+
+XWaylandEisContext::XWaylandEisContext(EisBackend *backend)
+    : EisContext(backend, {EIS_DEVICE_CAP_POINTER | EIS_DEVICE_CAP_POINTER_ABSOLUTE | EIS_DEVICE_CAP_KEYBOARD | EIS_DEVICE_CAP_TOUCH | EIS_DEVICE_CAP_SCROLL | EIS_DEVICE_CAP_BUTTON})
+    , socketName(qgetenv("XDG_RUNTIME_DIR") + QByteArrayLiteral("/kwin-xwayland-eis-socket.") + QByteArray::number(getpid()))
+{
+    eis_setup_backend_socket(m_eisContext, socketName.constData());
+}
+
+void XWaylandEisContext::connectionRequested(eis_client *client)
+{
+    if (options->xwaylandEisNoPrompt()) {
+        connectToClient(client);
+        return;
+    }
+    auto dialog = new KMessageDialog(KMessageDialog::QuestionTwoActions, i18nc("", "%1 wants to control the pointer and keyboard", eis_client_get_name(client)));
+    dialog->setCaption(QStringLiteral("Remote control requested"));
+    dialog->setIcon(QIcon::fromTheme(QStringLiteral("krfb")));
+    KGuiItem allow(i18nc("@action:button", "Allow"), QStringLiteral("dialog-ok"));
+    dialog->setButtons(allow, KStandardGuiItem::cancel());
+    QObject::connect(dialog, &QDialog::finished, [client, this](int result) {
+        if (result == KMessageDialog::PrimaryAction) {
+            connectToClient(client);
+        } else {
+            eis_client_disconnect(client);
+        }
+    });
+    dialog->show();
+}
+
+}
diff --git a/src/plugins/eis/xwaylandeiscontext.h b/src/plugins/eis/xwaylandeiscontext.h
new file mode 100644
index 00000000000..6e2007f3ada
--- /dev/null
+++ b/src/plugins/eis/xwaylandeiscontext.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include <eiscontext.h>
+
+namespace KWin
+{
+
+class XWaylandEisContext : public EisContext
+{
+public:
+    XWaylandEisContext(EisBackend *backend);
+
+    const QByteArray socketName;
+
+private:
+    void connectionRequested(eis_client *client) override;
+};
+}
-- 
GitLab

